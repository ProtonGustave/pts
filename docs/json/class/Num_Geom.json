{
  "name": "Geom",
  "source": [
    [
      "src/Num.ts",
      197,
      17
    ]
  ],
  "kind": "Class",
  "id": 1478,
  "comment": "Geom class provides static helper functions for basic geometric operations.",
  "constructor": [],
  "accessors": [],
  "methods": [
    {
      "name": "anchor",
      "source": [
        [
          "src/Num.ts",
          271,
          15
        ]
      ],
      "id": 1497,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given an anchor Pt, rebase all Pts in this group either to or from this anchor base.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>",
              "type": "PtLikeIterable",
              "default": false
            },
            {
              "name": "ptOrIndex",
              "comment": "an index for the Pt array, or an external Pt",
              "type": "PtLike | number",
              "default": "0"
            },
            {
              "name": "direction",
              "comment": "a string either \"to\" (subtract all Pt with this anchor base), or \"from\" (add all Pt from this anchor base)\n",
              "type": "to | from",
              "default": "\"to\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "boundAngle",
      "source": [
        [
          "src/Num.ts",
          203,
          19
        ]
      ],
      "id": 1479,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Bound an angle between 0 to 360 degrees.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "angle",
              "comment": "angle value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "boundRadian",
      "source": [
        [
          "src/Num.ts",
          212,
          20
        ]
      ],
      "id": 1482,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Bound a radian between 0 to two PI.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "radian",
              "comment": "radian value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "boundingBox",
      "source": [
        [
          "src/Num.ts",
          240,
          20
        ]
      ],
      "id": 1491,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a bounding box for a set of Pts.",
          "returns": "Group",
          "returns_comment": "a Group of two Pts, representing the top-left and bottom-right corners\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<Pt>",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "centroid",
      "source": [
        [
          "src/Num.ts",
          260,
          17
        ]
      ],
      "id": 1494,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a centroid (the average middle point) for a set of Pts.",
          "returns": "Pt",
          "returns_comment": "a centroid Pt\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cosTable",
      "source": [
        [
          "src/Num.ts",
          491,
          17
        ]
      ],
      "id": 1545,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Generate a cosine lookup table.",
          "returns": "{ cos:`find`, table:`Float64Array` }",
          "returns_comment": "an object with a cosine tables (array of 360 values) and a function to get cosine given a radian input.\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "interpolate",
      "source": [
        [
          "src/Num.ts",
          292,
          20
        ]
      ],
      "id": 1502,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get an interpolated (or extrapolated) value between two Pts. For linear interpolation between 2 scalar values, use [`Num.lerp`](#link).",
          "returns": "Pt",
          "returns_comment": "interpolated point as a new Pt\n",
          "parameters": [
            {
              "name": "a",
              "comment": "first Pt",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "b",
              "comment": "second Pt",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "t",
              "comment": "a value between 0 to 1 to interpolate, or any other value to extrapolate",
              "type": "number",
              "default": "0.5"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "isPerpendicular",
      "source": [
        [
          "src/Num.ts",
          326,
          24
        ]
      ],
      "id": 1511,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if two Pts are perpendicular to each other (2D only).",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p1",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "p2",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "perpendicular",
      "source": [
        [
          "src/Num.ts",
          307,
          22
        ]
      ],
      "id": 1507,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Find two Pts that are perpendicular to this Pt (2D only).",
          "returns": "Group",
          "returns_comment": "an array of two Pt that are perpendicular to this Pt\n",
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "a string such as \"xy\" (use Const.xy) or an array to specify index for two dimensions",
              "type": "string | PtLike",
              "default": "Const.xy"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reflect2D",
      "source": [
        [
          "src/Num.ts",
          468,
          18
        ]
      ],
      "id": 1540,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Reflect a Pt or a Group of Pts along a 2D line. You may also use [`Pt.reflect2D`](#link) instance method.",
          "returns": "Geom",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ps",
              "comment": "either a single Pt, or a Group or an Iterable<Pt>",
              "type": "Pt | PtIterable",
              "default": false
            },
            {
              "name": "line",
              "comment": "a Group or an Iterable<PtLike> that defines a line for reflection",
              "type": "PtLikeIterable",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional axis such as \"xy\" (use Const.xy) to define a 2D plane, or a number array to specify indices\n",
              "type": "string | PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rotate2D",
      "source": [
        [
          "src/Num.ts",
          412,
          17
        ]
      ],
      "id": 1528,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Rotate a Pt or a Group of Pts in 2D space. You may also use [`Pt.rotate2D`](#link) instance method.",
          "returns": "Geom",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ps",
              "comment": "either a single Pt, or a Group or an Iterable<Pt>",
              "type": "Pt | PtIterable",
              "default": false
            },
            {
              "name": "angle",
              "comment": "rotate angle",
              "type": "number",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to rotate from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional axis such as \"xy\" (use Const.xy) to define a 2D plane, or a number array to specify indices\n",
              "type": "string | PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scale",
      "source": [
        [
          "src/Num.ts",
          389,
          14
        ]
      ],
      "id": 1523,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Scale a Pt or a Group of Pts. You may also use [`Pt.scale`](#link) instance method.",
          "returns": "Geom",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ps",
              "comment": "either a single Pt, or a Group or an Iterable<Pt>",
              "type": "Pt | PtIterable",
              "default": false
            },
            {
              "name": "scale",
              "comment": "scale value",
              "type": "number | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to scale from\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shear2D",
      "source": [
        [
          "src/Num.ts",
          440,
          16
        ]
      ],
      "id": 1534,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Shear a Pt or a Group of Pts in 2D space. You may also use [`Pt.shear2D`](#link) instance method.",
          "returns": "Geom",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ps",
              "comment": "either a single Pt, or a Group or an Iterable<Pt>",
              "type": "Pt | PtIterable",
              "default": false
            },
            {
              "name": "scale",
              "comment": "shearing value which can be a number or an array of 2 numbers",
              "type": "number | PtLike",
              "default": false
            },
            {
              "name": "anchor",
              "comment": "optional anchor point to shear from",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "axis",
              "comment": "optional axis such as \"xy\" (use Const.xy) to define a 2D plane, or a number array to specify indices\n",
              "type": "string | PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sinTable",
      "source": [
        [
          "src/Num.ts",
          504,
          17
        ]
      ],
      "id": 1550,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Generate a sine lookup table.",
          "returns": "{ sin:`find`, table:`Float64Array` }",
          "returns_comment": "an object with a sine tables (array of 360 values) and a function to get sine value given a radian input.\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "sortEdges",
      "source": [
        [
          "src/Num.ts",
          349,
          18
        ]
      ],
      "id": 1520,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Sort the Pts so that their edges will form a non-overlapping polygon. ([Reference](https://stackoverflow.com/questions/6989100/sort-points-in-clockwise-order))",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<Pt>\n",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toDegree",
      "source": [
        [
          "src/Num.ts",
          230,
          17
        ]
      ],
      "id": 1488,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert an angle in radian to degree.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "radian",
              "comment": "radian value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toRadian",
      "source": [
        [
          "src/Num.ts",
          221,
          17
        ]
      ],
      "id": 1485,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert an angle in degree to radian.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "angle",
              "comment": "angle value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "withinBound",
      "source": [
        [
          "src/Num.ts",
          337,
          20
        ]
      ],
      "id": 1515,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if a Pt is within the rectangular boundary defined by two Pts.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "the Pt to check",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "boundPt1",
              "comment": "boundary Pt 1",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "boundPt2",
              "comment": "boundary Pt 2\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}