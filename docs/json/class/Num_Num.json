{
  "name": "Num",
  "source": [
    [
      "src/Num.ts",
      14,
      16
    ]
  ],
  "kind": "Class",
  "id": 1375,
  "comment": "Num class provides static helper functions for basic numeric operations.",
  "constructor": [],
  "accessors": [],
  "methods": [
    {
      "name": "average",
      "source": [
        [
          "src/Num.ts",
          139,
          16
        ]
      ],
      "id": 1418,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Average a group of numeric arrays",
          "returns": "Pt",
          "returns_comment": "a Pt of averages\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "boundValue",
      "source": [
        [
          "src/Num.ts",
          57,
          19
        ]
      ],
      "id": 1392,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Different from [`Num.clamp`](#link) in that the value out-of-bound will be \"looped back\" to the other end.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "val",
              "comment": "value to bound",
              "type": "number",
              "default": false
            },
            {
              "name": "min",
              "comment": "min value",
              "type": "number",
              "default": false
            },
            {
              "name": "max",
              "comment": "max value",
              "type": "number",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`boundValue(361, 0, 360)` will return 1\n"
            }
          ]
        }
      ]
    },
    {
      "name": "clamp",
      "source": [
        [
          "src/Num.ts",
          45,
          14
        ]
      ],
      "id": 1387,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Clamp values between min and max.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "val",
              "comment": "value to clamp",
              "type": "number",
              "default": false
            },
            {
              "name": "min",
              "comment": "min value",
              "type": "number",
              "default": false
            },
            {
              "name": "max",
              "comment": "max value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cycle",
      "source": [
        [
          "src/Num.ts",
          151,
          14
        ]
      ],
      "id": 1421,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given a value between 0 to 1, returns a value that cycles between 0 -> 1 -> 0 using the provided shaping method.",
          "returns": "number",
          "returns_comment": "a value between 0 to 1\n",
          "parameters": [
            {
              "name": "t",
              "comment": "a value between 0 to 1",
              "type": "number",
              "default": false
            },
            {
              "name": "method",
              "comment": "a shaping method. Default to [`Shaping.sineInOut`](#link).",
              "type": " Fn(t:number)",
              "default": "Shaping.sineInOut"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "equals",
      "source": [
        [
          "src/Num.ts",
          23,
          15
        ]
      ],
      "id": 1377,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if two numbers are equal or almost equal within a threshold.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "number a",
              "type": "number",
              "default": false
            },
            {
              "name": "b",
              "comment": "number b",
              "type": "number",
              "default": false
            },
            {
              "name": "threshold",
              "comment": "threshold value that specifies the minimum difference within which the two numbers are considered equal\n",
              "type": "number",
              "default": "0.00001"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lerp",
      "source": [
        [
          "src/Num.ts",
          34,
          13
        ]
      ],
      "id": 1382,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Calculate linear interpolation between 2 values.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "start value",
              "type": "number",
              "default": false
            },
            {
              "name": "b",
              "comment": "end value",
              "type": "number",
              "default": false
            },
            {
              "name": "t",
              "comment": "an interpolation value, usually between 0 to 1\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "mapToRange",
      "source": [
        [
          "src/Num.ts",
          165,
          19
        ]
      ],
      "id": 1428,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Map a value from one range to another.",
          "returns": "number",
          "returns_comment": "a remapped value in the second range\n",
          "parameters": [
            {
              "name": "n",
              "comment": "a value in the first range",
              "type": "number",
              "default": false
            },
            {
              "name": "currA",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "currB",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "targetA",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "targetB",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "normalizeValue",
      "source": [
        [
          "src/Num.ts",
          112,
          23
        ]
      ],
      "id": 1410,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Normalize a value within a range.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "n",
              "comment": "the value to normalize",
              "type": "number",
              "default": false
            },
            {
              "name": "a",
              "comment": "range value 1",
              "type": "number",
              "default": false
            },
            {
              "name": "b",
              "comment": "range value 1\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "random",
      "source": [
        [
          "src/Num.ts",
          185,
          15
        ]
      ],
      "id": 1438,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Return a random number between 0 and 1 from a seed,\nif the seed is not defined it uses Math.random",
          "returns": "number",
          "returns_comment": "a number between 0 and 1\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "randomPt",
      "source": [
        [
          "src/Num.ts",
          95,
          17
        ]
      ],
      "id": 1406,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a random Pt within the range defined by either 1 or 2 Pt",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "the range if only one Pt is used, or the start of the range if two Pt were used",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "b",
              "comment": "optional Pt to define the end of the range\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "randomRange",
      "source": [
        [
          "src/Num.ts",
          84,
          20
        ]
      ],
      "id": 1402,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a random number within a range.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "range value 1",
              "type": "number",
              "default": false
            },
            {
              "name": "b",
              "comment": "range value 2\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "seed",
      "source": [
        [
          "src/Num.ts",
          176,
          13
        ]
      ],
      "id": 1435,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Seed the pseudorandom generator.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "seed",
              "comment": "seed string\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sum",
      "source": [
        [
          "src/Num.ts",
          124,
          12
        ]
      ],
      "id": 1415,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Sum a group of numeric arrays.",
          "returns": "Pt",
          "returns_comment": "a Pt of the dimensional sums\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "within",
      "source": [
        [
          "src/Num.ts",
          74,
          15
        ]
      ],
      "id": 1397,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if a value is within two other values",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "value to check",
              "type": "number",
              "default": false
            },
            {
              "name": "a",
              "comment": "first bounding value",
              "type": "number",
              "default": false
            },
            {
              "name": "b",
              "comment": "second bounding value\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "generator",
      "source": [
        [
          "src/Num.ts",
          15,
          18
        ]
      ],
      "id": 1376,
      "flags": {
        "isStatic": true
      },
      "type": "generator",
      "overrides": false,
      "inherits": false,
      "comment": ""
    }
  ],
  "flags": {},
  "extends": [],
  "implements": []
}