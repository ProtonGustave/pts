{
  "name": "DOMSpace",
  "source": [
    [
      "src/Dom.ts",
      15,
      21
    ]
  ],
  "kind": "Class",
  "id": 5212,
  "comment": "DOMSpace is a space for DOM elements. Usually its subclasses such as [`HTMLSpace`](#link) and [`#SVGSpace`](#link) should be used instead.\nLearn more about spaces in [this guide](../guide/space-0500).",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/Dom.ts",
          23,
          22
        ]
      ],
      "id": 5220,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a DOMSpace for HTML DOM elements",
          "returns": "DOMSpace",
          "returns_comment": false,
          "parameters": [
            {
              "name": "elem",
              "comment": "Specify an element by its \"id\" attribute as string, or by the element object itself. Use css to customize its appearance if needed.",
              "type": "string | Element",
              "default": false
            },
            {
              "name": "callback",
              "comment": "an optional callback `function(boundingBox, spaceElement)` to be called when element is appended and ready. Alternatively, a \"ready\" event will also be fired from the element when it's appended, which can be traced with `spaceInstance.element.addEventListener(\"ready\")`",
              "type": "Function",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`new DOMSpace( \"#myElementID\" )`\n"
            }
          ]
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "autoResize",
      "source": [
        [
          "src/Dom.ts",
          138,
          16
        ],
        [
          "src/Dom.ts",
          148,
          16
        ]
      ],
      "id": 5240,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Set whether the canvas element should resize when its container is resized.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "auto",
          "comment": "a boolean value indicating if auto size is set\n",
          "type": "boolean",
          "default": false
        }
      }
    },
    {
      "name": "background",
      "source": [
        [
          "src/Dom.ts",
          228,
          16
        ],
        [
          "src/Dom.ts",
          232,
          16
        ]
      ],
      "id": 5260,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Set a background color on the container element.",
      "getter": {
        "type": "string"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "bg",
          "comment": "background color as hex or rgba string\n",
          "type": "string",
          "default": false
        }
      }
    },
    {
      "name": "center",
      "source": [
        [
          "src/Space.ts",
          239,
          12
        ]
      ],
      "id": 5404,
      "flags": {},
      "overrides": false,
      "inherits": "Space.center",
      "comment": "The center of this space's bounding box.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "customRendering",
      "source": [
        [
          "src/Space.ts",
          208,
          21
        ],
        [
          "src/Space.ts",
          209,
          21
        ]
      ],
      "id": 5384,
      "flags": {},
      "overrides": false,
      "inherits": "Space.customRendering",
      "comment": "Set a custom rendering function `fn(graphics_context, canvas_space)` if needed.",
      "getter": {
        "type": ""
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "f",
          "comment": "",
          "type": " Fn(context:any, self:Space)",
          "default": false
        }
      }
    },
    {
      "name": "element",
      "source": [
        [
          "src/Dom.ts",
          194,
          13
        ]
      ],
      "id": 5251,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get this DOM element.",
      "getter": {
        "type": "Element"
      },
      "setter": false
    },
    {
      "name": "height",
      "source": [
        [
          "src/Space.ts",
          251,
          12
        ]
      ],
      "id": 5408,
      "flags": {},
      "overrides": false,
      "inherits": "Space.height",
      "comment": "The height of this space's bounding box.",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "innerBound",
      "source": [
        [
          "src/Space.ts",
          227,
          23
        ]
      ],
      "id": 5400,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": "Space.innerBound",
      "comment": "The inner bounding box of the space, excluding its positions.",
      "getter": {
        "type": "Bound"
      },
      "setter": false
    },
    {
      "name": "isPlaying",
      "source": [
        [
          "src/Space.ts",
          215,
          15
        ]
      ],
      "id": 5396,
      "flags": {},
      "overrides": false,
      "inherits": "Space.isPlaying",
      "comment": "Indicate whether the animation is playing.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "outerBound",
      "source": [
        [
          "src/Space.ts",
          221,
          16
        ]
      ],
      "id": 5398,
      "flags": {},
      "overrides": false,
      "inherits": "Space.outerBound",
      "comment": "The outer bounding box which includes its positions.",
      "getter": {
        "type": "Bound"
      },
      "setter": false
    },
    {
      "name": "parent",
      "source": [
        [
          "src/Dom.ts",
          202,
          12
        ]
      ],
      "id": 5253,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the parent DOM element that contains this DOM element.",
      "getter": {
        "type": "Element"
      },
      "setter": false
    },
    {
      "name": "pointer",
      "source": [
        [
          "src/Space.ts",
          297,
          20
        ]
      ],
      "id": 5286,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": "MultiTouchSpace.pointer",
      "comment": "Get the mouse or touch pointer that stores the last action.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "ready",
      "source": [
        [
          "src/Dom.ts",
          210,
          11
        ]
      ],
      "id": 5255,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "A property to indicate if the Space is ready.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "size",
      "source": [
        [
          "src/Space.ts",
          233,
          10
        ]
      ],
      "id": 5402,
      "flags": {},
      "overrides": false,
      "inherits": "Space.size",
      "comment": "The size of this space's bounding box.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "width",
      "source": [
        [
          "src/Space.ts",
          245,
          11
        ]
      ],
      "id": 5406,
      "flags": {},
      "overrides": false,
      "inherits": "Space.width",
      "comment": "The width of this space's bounding box.",
      "getter": {
        "type": "number"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "add",
      "source": [
        [
          "src/Space.ts",
          54,
          5
        ]
      ],
      "id": 5354,
      "flags": {},
      "overrides": false,
      "inherits": "Space.add",
      "signatures": [
        {
          "comment": "Add an [`IPlayer`](#link) object or a [`AnimateCallbackFn`](#link) callback function to handle events in this Space. An IPlayer is an object with the following callback functions:\n- required: `animate: fn( time, ftime, space )`\n- optional: `start: fn(bound, space)`\n- optional: `resize: fn( size, event )`\n- optional: `action: fn( type, x, y, event )`\nSubclasses of Space may define other callback functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "",
              "type": "IPlayer | AnimateCallbackFn",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "bindCanvas",
      "source": [
        [
          "src/Space.ts",
          309,
          12
        ]
      ],
      "id": 5288,
      "flags": {},
      "overrides": false,
      "inherits": "MultiTouchSpace.bindCanvas",
      "signatures": [
        {
          "comment": "Bind event listener in canvas element. You can also use [`MultiTouchSpace.bindMouse`](#link) or [`MultiTouchSpace.bindTouch`](#link) to bind mouse or touch events conveniently.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "evt",
              "comment": "an event string such as \"mousedown\"",
              "type": "string",
              "default": false
            },
            {
              "name": "callback",
              "comment": "callback function for this event",
              "type": "EventListener",
              "default": false
            },
            {
              "name": "options",
              "comment": "options for [addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).\n",
              "type": "any",
              "default": "{}"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "bindMouse",
      "source": [
        [
          "src/Space.ts",
          332,
          11
        ]
      ],
      "id": 5298,
      "flags": {},
      "overrides": false,
      "inherits": "MultiTouchSpace.bindMouse",
      "signatures": [
        {
          "comment": "A convenient method to bind (or unbind) all mouse events in canvas element.\nAll [`IPlayer`](#link) objects added to this space that implement an `action` callback property will receive mouse event callbacks.\nThe types of mouse actions are defined by [`UIPointerActions`](#link) constants: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "_bind",
              "comment": "a boolean value to bind mouse events if set to `true`. If `false`, all mouse events will be unbound. Default is true.",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Space.add`](#link)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "bindTouch",
      "source": [
        [
          "src/Space.ts",
          364,
          11
        ]
      ],
      "id": 5301,
      "flags": {},
      "overrides": false,
      "inherits": "MultiTouchSpace.bindTouch",
      "signatures": [
        {
          "comment": "A convenient method to bind (or unbind) all touch events in canvas element.\nAll [`IPlayer`](#link) objects added to this space that implement an `action` callback property will receive touch event callbacks.\nThe types of mouse actions are defined by [`UIPointerActions`](#link) constants: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "bind",
              "comment": "a boolean value to bind touch events if set to `true`. If `false`, all mouse events will be unbound. Default is true.",
              "type": "boolean",
              "default": "true"
            },
            {
              "name": "passive",
              "comment": "a boolean value to set passive mode, ie, it won't block scrolling. Default is false.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Space.add`](#link)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "clear",
      "source": [
        [
          "src/Dom.ts",
          217,
          7
        ]
      ],
      "id": 5257,
      "flags": {},
      "overrides": "Space.clear",
      "inherits": false,
      "signatures": [
        {
          "comment": "Clear the element's contents, and optionally set a new background color. This overrides Space's `clear` function.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "bg",
              "comment": "Optionally specify a custom background color in hex or rgba string, or \"transparent\". If not defined, it will use its `bgcolor` property as background color to clear the canvas.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "dispose",
      "source": [
        [
          "src/Dom.ts",
          298,
          9
        ]
      ],
      "id": 5280,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Dispose of browser resources held by this space and remove all players. Call this before unmounting the DOM.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "getForm",
      "source": [
        [
          "src/Dom.ts",
          130,
          9
        ]
      ],
      "id": 5238,
      "flags": {},
      "overrides": "Space.getForm",
      "inherits": false,
      "signatures": [
        {
          "comment": "Not implemented. See SVGSpace and HTMLSpace for implementation.",
          "returns": "Form",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "pause",
      "source": [
        [
          "src/Space.ts",
          160,
          7
        ]
      ],
      "id": 5370,
      "flags": {},
      "overrides": false,
      "inherits": "Space.pause",
      "signatures": [
        {
          "comment": "Pause the animation.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "toggle",
              "comment": "a boolean value to set if this function call should be a toggle (between pause and resume)\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "play",
      "source": [
        [
          "src/Space.ts",
          95,
          6
        ]
      ],
      "id": 5362,
      "flags": {},
      "overrides": false,
      "inherits": "Space.play",
      "signatures": [
        {
          "comment": "Main play loop. This implements `window.requestAnimationFrame` and calls it recursively.\nYou may override this `play()` function to implement your own animation loop.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "time",
              "comment": "current time\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "playItems",
      "source": [
        [
          "src/Space.ts",
          133,
          21
        ]
      ],
      "id": 5367,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "Space.playItems",
      "signatures": [
        {
          "comment": "Main animate function. This calls all the items to perform.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "time",
              "comment": "current time\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "playOnce",
      "source": [
        [
          "src/Space.ts",
          189,
          10
        ]
      ],
      "id": 5378,
      "flags": {},
      "overrides": false,
      "inherits": "Space.playOnce",
      "signatures": [
        {
          "comment": "Play animation loop, and then stop after `duration` time has passed.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "duration",
              "comment": "a value in millisecond to specify a time period to play before stopping, or `-1` to play forever\n",
              "type": "number",
              "default": "5000"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "refresh",
      "source": [
        [
          "src/Space.ts",
          39,
          9
        ]
      ],
      "id": 5351,
      "flags": {},
      "overrides": false,
      "inherits": "Space.refresh",
      "signatures": [
        {
          "comment": "Set whether the rendering should be repainted on each frame.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "b",
              "comment": "a boolean value to set whether to repaint each frame\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "remove",
      "source": [
        [
          "src/Space.ts",
          75,
          8
        ]
      ],
      "id": 5357,
      "flags": {},
      "overrides": false,
      "inherits": "Space.remove",
      "signatures": [
        {
          "comment": "Remove a player from this Space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "player",
              "comment": "an IPlayer that has an `animateID` property\n",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "removeAll",
      "source": [
        [
          "src/Space.ts",
          84,
          11
        ]
      ],
      "id": 5360,
      "flags": {},
      "overrides": false,
      "inherits": "Space.removeAll",
      "signatures": [
        {
          "comment": "Remove all players from this Space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "render",
      "source": [
        [
          "src/Space.ts",
          199,
          18
        ]
      ],
      "id": 5381,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "Space.render",
      "signatures": [
        {
          "comment": "Custom rendering.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "context",
              "comment": "rendering context\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "replay",
      "source": [
        [
          "src/Space.ts",
          123,
          8
        ]
      ],
      "id": 5365,
      "flags": {},
      "overrides": false,
      "inherits": "Space.replay",
      "signatures": [
        {
          "comment": "Replay the animation after [`Space.stop`](#link). This resets the end-time counter.\nYou may also use [`Space.pause`](#link) and [`resume`](#link) for temporary pause.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "resize",
      "source": [
        [
          "src/Dom.ts",
          156,
          8
        ]
      ],
      "id": 5244,
      "flags": {},
      "overrides": "Space.resize",
      "inherits": false,
      "signatures": [
        {
          "comment": "This overrides Space's `resize` function. It's used as a callback function for window's resize event and not usually called directly. You can keep track of resize events with `resize: (bound, evt)` callback in your player objects (See [`Space.add`](#link) function).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "b",
              "comment": "a Bound object to resize to",
              "type": "Bound",
              "default": false
            },
            {
              "name": "evt",
              "comment": "Optionally pass a resize event\n",
              "type": "Event",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "resume",
      "source": [
        [
          "src/Space.ts",
          169,
          8
        ]
      ],
      "id": 5373,
      "flags": {},
      "overrides": false,
      "inherits": "Space.resume",
      "signatures": [
        {
          "comment": "Resume the pause animation.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "setup",
      "source": [
        [
          "src/Dom.ts",
          116,
          7
        ]
      ],
      "id": 5232,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set up various options for DOMSpace. This is usually set during instantiation, eg `new DOMSpace(...).setup( {opt} )`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "opt",
              "comment": "an object with these optional properties: **bgcolor** is a hex or rgba string to set initial background color of the canvas, or use `false` or \"transparent\" to set a transparent background; **resize** a boolean to set whether `<canvas>` size should auto resize to match its container's size, which can also be set using `autoSize()`.",
              "type": "{ bgcolor:`string`, resize:`boolean` }",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`space.setup({ bgcolor: \"#f00\", resize: true })`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "stop",
      "source": [
        [
          "src/Space.ts",
          179,
          6
        ]
      ],
      "id": 5375,
      "flags": {},
      "overrides": false,
      "inherits": "Space.stop",
      "signatures": [
        {
          "comment": "Specify when the animation should stop: immediately, after a time period, or never stops.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "t",
              "comment": "a value in millisecond to specify a time period to play before stopping, or `-1` to play forever, or `0` to end immediately. Default is 0 which will stop the animation immediately.\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "style",
      "source": [
        [
          "src/Dom.ts",
          241,
          7
        ]
      ],
      "id": 5264,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add or update a style definition, and optionally update that style in the Element.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "key",
              "comment": "style name",
              "type": "string",
              "default": false
            },
            {
              "name": "val",
              "comment": "style value",
              "type": "string",
              "default": false
            },
            {
              "name": "update",
              "comment": "a boolean to update the element's style immediately if set to `true`. Default is `false`.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "styles",
      "source": [
        [
          "src/Dom.ts",
          254,
          8
        ]
      ],
      "id": 5269,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add of update a list of style definitions, and optionally update those styles in the Element.",
          "returns": "this",
          "returns_comment": "this\n",
          "parameters": [
            {
              "name": "styles",
              "comment": "a key-value objects of style definitions",
              "type": "object",
              "default": false
            },
            {
              "name": "update",
              "comment": "a boolean to update the element's style immediately if set to `true`. Default is `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "touchesToPoints",
      "source": [
        [
          "src/Space.ts",
          390,
          17
        ]
      ],
      "id": 5305,
      "flags": {},
      "overrides": false,
      "inherits": "MultiTouchSpace.touchesToPoints",
      "signatures": [
        {
          "comment": "A convenient method to convert the touch points in a touch event to an array of Pts.",
          "returns": "Pt[]",
          "returns_comment": "an array of Pt, whose origin position (0,0) is offset to the top-left of this space\n",
          "parameters": [
            {
              "name": "evt",
              "comment": "a touch event which contains touches, changedTouches, and targetTouches list",
              "type": "TouchEvent",
              "default": false
            },
            {
              "name": "which",
              "comment": "a string to select a touches list: \"touches\", \"changedTouches\", or \"targetTouches\". Default is \"touches\"",
              "type": "TouchPointsKey",
              "default": "\"touches\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "unbindCanvas",
      "source": [
        [
          "src/Space.ts",
          320,
          14
        ]
      ],
      "id": 5293,
      "flags": {},
      "overrides": false,
      "inherits": "MultiTouchSpace.unbindCanvas",
      "signatures": [
        {
          "comment": "Unbind a callback from the event listener.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "evt",
              "comment": "an event string such as \"mousedown\"",
              "type": "string",
              "default": false
            },
            {
              "name": "callback",
              "comment": "callback function to unbind",
              "type": "EventListener",
              "default": false
            },
            {
              "name": "options",
              "comment": "options for [removeEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener). This should match the options set in bindCanvas.\n",
              "type": "any",
              "default": "{}"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "createElement",
      "source": [
        [
          "src/Dom.ts",
          74,
          22
        ]
      ],
      "id": 5224,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Helper function to create a DOM element.",
          "returns": "Element",
          "returns_comment": false,
          "parameters": [
            {
              "name": "elem",
              "comment": "element tag name",
              "type": "string",
              "default": "\"div\""
            },
            {
              "name": "id",
              "comment": "element id attribute",
              "type": "string",
              "default": false
            },
            {
              "name": "appendTo",
              "comment": "Optional, if specified, the created element will be appended to this element\n",
              "type": "Element",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getInlineStyles",
      "source": [
        [
          "src/Dom.ts",
          284,
          24
        ]
      ],
      "id": 5277,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static helper function to compose an inline style string from a object of styles.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "data",
              "comment": "an object with key-value pairs",
              "type": "object",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "exmaple",
              "text": "`DOMSpace.getInlineStyles( {width: \"100px\", \"font-size\": \"10px\"} )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "setAttr",
      "source": [
        [
          "src/Dom.ts",
          268,
          16
        ]
      ],
      "id": 5273,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static helper function to add or update Element attributes.",
          "returns": "Element",
          "returns_comment": "this DOM element\n",
          "parameters": [
            {
              "name": "elem",
              "comment": "Element to update",
              "type": "Element",
              "default": false
            },
            {
              "name": "data",
              "comment": "an object with key-value pairs",
              "type": "object",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "bound",
      "source": [
        [
          "src/Space.ts",
          16,
          17
        ]
      ],
      "id": 5340,
      "flags": {
        "isProtected": true
      },
      "type": "bound",
      "overrides": false,
      "inherits": "Space.bound",
      "comment": ""
    },
    {
      "name": "id",
      "source": [
        [
          "src/Dom.ts",
          20,
          4
        ]
      ],
      "id": 5215,
      "flags": {},
      "type": "id",
      "overrides": "Space.id",
      "inherits": false,
      "comment": ""
    },
    {
      "name": "playerCount",
      "source": [
        [
          "src/Space.ts",
          20,
          23
        ]
      ],
      "id": 5346,
      "flags": {
        "isProtected": true
      },
      "type": "playerCount",
      "overrides": false,
      "inherits": "Space.playerCount",
      "comment": ""
    },
    {
      "name": "players",
      "source": [
        [
          "src/Space.ts",
          19,
          19
        ]
      ],
      "id": 5345,
      "flags": {
        "isProtected": true
      },
      "type": "players",
      "overrides": false,
      "inherits": "Space.players",
      "comment": ""
    }
  ],
  "flags": {},
  "extends": [
    "MultiTouchSpace"
  ],
  "implements": []
}