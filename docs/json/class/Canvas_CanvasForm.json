{
  "name": "CanvasForm",
  "source": [
    [
      "src/Canvas.ts",
      443,
      23
    ]
  ],
  "kind": "Class",
  "id": 3780,
  "comment": "CanvasForm is an implementation of abstract class [`VisualForm`](#link). It provide methods to express Pts on [`CanvasSpace`](#link).\nYou may extend CanvasForm to implement your own expressions for CanvasSpace.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/Canvas.ts",
          456,
          4
        ]
      ],
      "id": 3794,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a new CanvasForm. You may also use [`CanvasSpace.getForm()`](#link) to get the default form.",
          "returns": "CanvasForm",
          "returns_comment": false,
          "parameters": [
            {
              "name": "space",
              "comment": "an instance of CanvasSpace\n",
              "type": "CanvasSpace | CanvasRenderingContext2D",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "ctx",
      "source": [
        [
          "src/Canvas.ts",
          499,
          9
        ]
      ],
      "id": 3799,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the rendering context of canvas to perform other canvas functions.",
      "getter": {
        "type": "PtsCanvasRenderingContext2D"
      },
      "setter": false
    },
    {
      "name": "currentFont",
      "source": [
        [
          "src/Form.ts",
          52,
          17
        ]
      ],
      "id": 4013,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.currentFont",
      "comment": "Get the current font in use in this form.",
      "getter": {
        "type": "Font"
      },
      "setter": false
    },
    {
      "name": "filled",
      "source": [
        [
          "src/Form.ts",
          38,
          12
        ],
        [
          "src/Form.ts",
          39,
          12
        ]
      ],
      "id": 4005,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.filled",
      "comment": "Check whether this form currently has fill style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    },
    {
      "name": "ready",
      "source": [
        [
          "src/Form.ts",
          18,
          11
        ]
      ],
      "id": 4050,
      "flags": {},
      "overrides": false,
      "inherits": "Form.ready",
      "comment": "get whether the Form has received the Space's rendering context.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "space",
      "source": [
        [
          "src/Canvas.ts",
          492,
          11
        ]
      ],
      "id": 3797,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "get the CanvasSpace instance that this form is associated with",
      "getter": {
        "type": "CanvasSpace"
      },
      "setter": false
    },
    {
      "name": "stroked",
      "source": [
        [
          "src/Form.ts",
          45,
          13
        ],
        [
          "src/Form.ts",
          46,
          13
        ]
      ],
      "id": 4009,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.stroked",
      "comment": "Check whether this form currently has stroke style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    }
  ],
  "methods": [
    {
      "name": "alignText",
      "source": [
        [
          "src/Canvas.ts",
          1231,
          13
        ]
      ],
      "id": 3995,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set text alignment and baseline (eg, vertical-align).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "alignment",
              "comment": "HTML canvas' textAlign option: \"left\", \"right\", \"center\", \"start\", or \"end\"",
              "type": "CanvasTextAlign",
              "default": "\"left\""
            },
            {
              "name": "baseline",
              "comment": "HTML canvas' textBaseline option: \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\". For convenience, you can also use \"center\" (same as \"middle\"), and \"baseline\" (same as \"alphabetic\")\n",
              "type": "CanvasTextBaseline",
              "default": "\"alphabetic\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "alpha",
      "source": [
        [
          "src/Canvas.ts",
          531,
          9
        ]
      ],
      "id": 3808,
      "flags": {},
      "overrides": "VisualForm.alpha",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current alpha value.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "alpha value between 0 and 1\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.alpha(0.6)`"
            }
          ]
        }
      ]
    },
    {
      "name": "applyFillStroke",
      "source": [
        [
          "src/Canvas.ts",
          596,
          19
        ]
      ],
      "id": 3820,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient function to apply fill and/or stroke after custom drawings using canvas context (eg, `form.ctx.ellipse(...)`).\nYou don't need to call this function if you're using Pts' drawing functions like `form.point` or `form.rect`",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "filled",
              "comment": "apply fill when set to `true`",
              "type": "boolean | string",
              "default": "true"
            },
            {
              "name": "stroked",
              "comment": "apply stroke when set to `true`",
              "type": "boolean | string",
              "default": "true"
            },
            {
              "name": "strokeWidth",
              "comment": "optionally set a stroke width",
              "type": "number",
              "default": "1"
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.ctx.beginPath(); form.ctx.ellipse(...); form.applyFillStroke();`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "arc",
      "source": [
        [
          "src/Canvas.ts",
          912,
          7
        ]
      ],
      "id": 3913,
      "flags": {},
      "overrides": "VisualForm.arc",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw an arc.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the arc circle",
              "type": "number",
              "default": false
            },
            {
              "name": "startAngle",
              "comment": "start angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "endAngle",
              "comment": "end angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "src/Canvas.ts",
          847,
          10
        ]
      ],
      "id": 3885,
      "flags": {},
      "overrides": "VisualForm.circle",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a circle. See also [`Circle.fromCenter`](#link)",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "usually a Group or an Iterable<PtLike> with 2 Pt, but it can also take an array of two numeric arrays [ [position], [size] ]\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circles",
      "source": [
        [
          "src/Form.ts",
          160,
          9
        ]
      ],
      "id": 4034,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.circles",
      "signatures": [
        {
          "comment": "Draw multiple circles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "clip",
      "source": [
        [
          "src/Canvas.ts",
          657,
          8
        ]
      ],
      "id": 3835,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a clipping mask from the current path. See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip) for details.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "composite",
      "source": [
        [
          "src/Canvas.ts",
          648,
          13
        ]
      ],
      "id": 3832,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set composite operation (also known as blend mode). You can also call this function without parameters to get back to default 'source-over' mode. See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) for the full list of operations you can use.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "mode",
              "comment": "a composite operation such as 'lighten', 'multiply', 'overlay', and 'color-burn'.\n",
              "type": "string",
              "default": "\"source-over\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "dash",
      "source": [
        [
          "src/Canvas.ts",
          669,
          8
        ]
      ],
      "id": 3837,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Activate dashed stroke and set dash style. You can customize the segments and offset.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "segments",
              "comment": "Dash segments. Defaults to `true` which corresponds to `[5, 5]`. Pass `false` to deactivate dashes. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash))",
              "type": "PtLike | boolean",
              "default": "true"
            },
            {
              "name": "offset",
              "comment": "Dash offset. Defaults to 0. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.dash()`, `form.dash([5, 10])`, `form.dash([5, 5], 5)`, `form.dash(false)`"
            }
          ]
        }
      ]
    },
    {
      "name": "ellipse",
      "source": [
        [
          "src/Canvas.ts",
          881,
          11
        ]
      ],
      "id": 3897,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw an ellipse.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius [x, y] of the ellipse",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "rotation",
              "comment": "rotation of the ellipse in radian. Default is 0.",
              "type": "number",
              "default": "0"
            },
            {
              "name": "startAngle",
              "comment": "start angle of the ellipse. Default is 0.",
              "type": "number",
              "default": "0"
            },
            {
              "name": "endAngle",
              "comment": "end angle of the ellipse. Default is 2 PI.",
              "type": "number",
              "default": "Const.two_pi"
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fill",
      "source": [
        [
          "src/Canvas.ts",
          543,
          8
        ]
      ],
      "id": 3811,
      "flags": {},
      "overrides": "VisualForm.fill",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current fill style. Provide a valid color string such as `\"#FFF\"` or `\"rgba(255,0,100,0.5)\"` or `false` to specify no fill color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle))\n",
              "type": "string | boolean | CanvasGradient | CanvasPattern",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#F90\")`, `form.fill(\"rgba(0,0,0,.5\")`, `form.fill(false)`"
            }
          ]
        }
      ]
    },
    {
      "name": "fillOnly",
      "source": [
        [
          "src/Form.ts",
          92,
          10
        ]
      ],
      "id": 4020,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.fillOnly",
      "signatures": [
        {
          "comment": "Set current fill style and remove stroke style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color as string or `false` to specify transparent.\n",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "font",
      "source": [
        [
          "src/Canvas.ts",
          695,
          8
        ]
      ],
      "id": 3841,
      "flags": {},
      "overrides": "VisualForm.font",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set the current font.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sizeOrFont",
              "comment": "either a number to specify font-size, or a `Font` object to specify all font properties",
              "type": "number | Font",
              "default": false
            },
            {
              "name": "weight",
              "comment": "Optional font-weight string such as \"bold\"",
              "type": "string",
              "default": false
            },
            {
              "name": "style",
              "comment": "Optional font-style string such as \"italic\"",
              "type": "string",
              "default": false
            },
            {
              "name": "lineHeight",
              "comment": "Optional line-height number suchas 1.5",
              "type": "number",
              "default": false
            },
            {
              "name": "family",
              "comment": "Optional font-family such as \"Helvetica, sans-serif\"",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.font( myFont )`, `form.font(14, \"bold\")`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "fontWidthEstimate",
      "source": [
        [
          "src/Canvas.ts",
          721,
          21
        ]
      ],
      "id": 3848,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set whether to use html canvas' [`measureText`](#link) function, or a faster but less accurate heuristic function.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "estimate",
              "comment": "`true` to use heuristic function, or `false` to use ctx.measureText\n",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getTextWidth",
      "source": [
        [
          "src/Canvas.ts",
          731,
          16
        ]
      ],
      "id": 3851,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the width of this text. It will return an actual measurement or an estimate based on [`fontWidthEstimate`](#link) setting. Default is an actual measurement using canvas context's measureText.",
          "returns": "number",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "a string of text contents\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "gradient",
      "source": [
        [
          "src/Canvas.ts",
          617,
          12
        ]
      ],
      "id": 3825,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "This function takes an array of gradient colors, and returns a function to define the areas of the gradient fill. See demo code in [CanvasForm.gradient](https://ptsjs.org/demo/?name=canvasform.textBox).",
          "returns": " Fn(area1:GroupLike, area2:GroupLike)",
          "returns_comment": "a function that takes 1 or 2 `Group` as parameters. Use a single `Group` to specify a rectangular area for linear gradient, or use 2 `Groups` to specify 2 `Circles` for radial gradient.",
          "parameters": [
            {
              "name": "stops",
              "comment": "an array of gradient stops. This can be an array of colors `[\"#f00\", \"#0f0\", ...]` for evenly distributed gradient, or an array of [stop, color] like `[[0.1, \"#f00\"], [0.7, \"#0f0\"]]`",
              "type": " | string[]",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`c1 = Circle.fromCenter(...); grad = form.gradient([\"#f00\", \"#00f\"]); form.fill( grad( c1, c2 ) ).circle( c1 )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "image",
      "source": [
        [
          "src/Canvas.ts",
          1081,
          9
        ]
      ],
      "id": 3956,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw an image.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ptOrRect",
              "comment": "a target area to place the image. Either a PtLike specifying a position, or a Group or an Iterable<PtLike> with 2 Pt (top-left position, bottom-right position) that specifies a bounding box. Default is (0,0) at top-left.",
              "type": "PtLike | PtLikeIterable",
              "default": false
            },
            {
              "name": "img",
              "comment": "either an [Img](#link) instance or an [`CanvasImageSource`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasImageSource) instance (eg the image from `<img>`, `<video>` or `<canvas>`)",
              "type": "CanvasImageSource | Img",
              "default": false
            },
            {
              "name": "orig",
              "comment": "optionally a Group or an Iterable<PtLike> with 2 Pt (top-left position, bottom-right position) that specifies a cropping box  in the original target.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "imageData",
      "source": [
        [
          "src/Canvas.ts",
          1114,
          13
        ]
      ],
      "id": 3966,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw ImageData on canvas using ImageData",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ptOrRect",
              "comment": "a target area to place the image. Either a Pt or numeric array specifying a position, or a Group or an Iterable<PtLike> with 2 Pt (top-left, bottom-right) that specifies a bounding box for resizing. Default is (0,0) at top-left.",
              "type": "PtLike | PtLikeIterable",
              "default": false
            },
            {
              "name": "img",
              "comment": "an ImageData object\n",
              "type": "ImageData",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "line",
      "source": [
        [
          "src/Canvas.ts",
          979,
          8
        ]
      ],
      "id": 3933,
      "flags": {},
      "overrides": "VisualForm.line",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a line or polyline.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a line\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lines",
      "source": [
        [
          "src/Form.ts",
          196,
          7
        ]
      ],
      "id": 4040,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.lines",
      "signatures": [
        {
          "comment": "Draw multiple lines at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "log",
      "source": [
        [
          "src/Canvas.ts",
          1246,
          7
        ]
      ],
      "id": 3999,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient way to draw some text on canvas for logging or debugging. It'll be draw on the top-left of the canvas as an overlay.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "txt",
              "comment": "text\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "paragraphBox",
      "source": [
        [
          "src/Canvas.ts",
          1171,
          16
        ]
      ],
      "id": 3988,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Fit multi-line text in a rectangular box. Note that this will also set canvas context's textBaseline to \"top\".",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "box",
              "comment": "a Group or an Iterable<PtLike> with 2 Pt that represents a bounding box",
              "type": "PtLikeIterable",
              "default": false
            },
            {
              "name": "txt",
              "comment": "string of text",
              "type": "string",
              "default": false
            },
            {
              "name": "lineHeight",
              "comment": "line height as a ratio of font size. Default is 1.2.",
              "type": "number",
              "default": "1.2"
            },
            {
              "name": "verticalAlign",
              "comment": "\"top\", \"middle\", or \"bottom\" to specify vertical alignment inside the box",
              "type": "string",
              "default": "\"top\""
            },
            {
              "name": "crop",
              "comment": "a boolean to specify whether to crop text when overflowing\n",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "src/Canvas.ts",
          822,
          9
        ]
      ],
      "id": 3875,
      "flags": {},
      "overrides": "VisualForm.point",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draws a point.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "a Pt object",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.point( p )`, `form.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "points",
      "source": [
        [
          "src/Form.ts",
          138,
          8
        ]
      ],
      "id": 4029,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.points",
      "signatures": [
        {
          "comment": "Draw multiple points at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "an array of Pt or an array of number arrays",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": false
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "src/Canvas.ts",
          1002,
          11
        ]
      ],
      "id": 3940,
      "flags": {},
      "overrides": "VisualForm.polygon",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a polygon.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representingg a polygon\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygons",
      "source": [
        [
          "src/Form.ts",
          212,
          10
        ]
      ],
      "id": 4043,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.polygons",
      "signatures": [
        {
          "comment": "Draw multiple polygons at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "src/Canvas.ts",
          1031,
          8
        ]
      ],
      "id": 3947,
      "flags": {},
      "overrides": "VisualForm.rect",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a rectangle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> with 2 Pt specifying the top-left and bottom-right positions.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rects",
      "source": [
        [
          "src/Form.ts",
          229,
          7
        ]
      ],
      "id": 4046,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.rects",
      "signatures": [
        {
          "comment": "Draw multiple rectangles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "renderOffscreen",
      "source": [
        [
          "src/Canvas.ts",
          518,
          17
        ]
      ],
      "id": 3805,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Render the offscreen canvas's content on the visible canvas",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "offset",
              "comment": "Optional offset on the top-left position when drawing on the visible canvas\n",
              "type": "PtLike",
              "default": "[0,0]"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reset",
      "source": [
        [
          "src/Canvas.ts",
          782,
          9
        ]
      ],
      "id": 3865,
      "flags": {},
      "overrides": "VisualForm.reset",
      "inherits": false,
      "signatures": [
        {
          "comment": "Reset the rendering context's common styles to this form's styles. This supports using multiple forms on the same canvas context.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "src/Canvas.ts",
          947,
          10
        ]
      ],
      "id": 3925,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a square, given a center and its half-size.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center Pt",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half-size\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "squares",
      "source": [
        [
          "src/Form.ts",
          169,
          9
        ]
      ],
      "id": 4037,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.squares",
      "signatures": [
        {
          "comment": "Draw multiple squares at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "stroke",
      "source": [
        [
          "src/Canvas.ts",
          564,
          10
        ]
      ],
      "id": 3814,
      "flags": {},
      "overrides": "VisualForm.stroke",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current stroke style. Provide a valid color string or `false` to specify no stroke color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "stroke color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle))",
              "type": "string | boolean | CanvasGradient | CanvasPattern",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".",
              "type": "CanvasLineJoin",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "Optional string to set line cap style. Can be \"butt\", \"round\", or \"square\".\n",
              "type": "CanvasLineCap",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.stroke(\"#F90\")`, `form.stroke(\"rgba(0,0,0,.5\")`, `form.stroke(false)`, `form.stroke(\"#000\", 0.5, 'round', 'square')`"
            }
          ]
        }
      ]
    },
    {
      "name": "strokeOnly",
      "source": [
        [
          "src/Form.ts",
          117,
          12
        ]
      ],
      "id": 4023,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.strokeOnly",
      "signatures": [
        {
          "comment": "Set stroke style and remove fill style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "stroke color as string or `false` to specify transparent.",
              "type": "string | boolean",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".",
              "type": "string",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "Optional string to set line cap style. Can be \"butt\", \"round\", or \"square\".\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "src/Canvas.ts",
          1139,
          8
        ]
      ],
      "id": 3976,
      "flags": {},
      "overrides": "VisualForm.text",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw text on canvas.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            },
            {
              "name": "maxWidth",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "textBox",
      "source": [
        [
          "src/Canvas.ts",
          1153,
          11
        ]
      ],
      "id": 3981,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Fit a single-line text in a rectangular box.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "box",
              "comment": "a rectangle box defined by a Group or an Iterable<Pt>",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "txt",
              "comment": "string of text",
              "type": "string",
              "default": false
            },
            {
              "name": "verticalAlign",
              "comment": "\"top\", \"middle\", or \"bottom\" to specify vertical alignment inside the box",
              "type": "string",
              "default": "\"middle\""
            },
            {
              "name": "tail",
              "comment": "text to indicate overflow such as \"...\". Default is empty \"\".",
              "type": "string",
              "default": "\"\""
            },
            {
              "name": "overrideBaseline",
              "comment": "If `true`, use the corresponding baseline as verticalAlign. If `false`, use the current canvas context's textBaseline setting. Default is `true`.\n",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "useOffscreen",
      "source": [
        [
          "src/Canvas.ts",
          507,
          14
        ]
      ],
      "id": 3801,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Toggle whether to draw on offscreen canvas (if offscreen is set in CanvasSpace)",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "off",
              "comment": "if `true`, draw on offscreen canvas instead of the visible canvas. Default is `true`",
              "type": "boolean",
              "default": "true"
            },
            {
              "name": "clear",
              "comment": "optionally provide a valid color string to fill a bg color. see CanvasSpace's `clearOffscreen` function.\n",
              "type": "boolean | string",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "arc",
      "source": [
        [
          "src/Canvas.ts",
          897,
          14
        ]
      ],
      "id": 3905,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw an arc.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the arc circle",
              "type": "number",
              "default": false
            },
            {
              "name": "startAngle",
              "comment": "start angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "endAngle",
              "comment": "end angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "src/Canvas.ts",
          835,
          17
        ]
      ],
      "id": 3880,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a circle.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the circle",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the circle\n",
              "type": "number",
              "default": "10"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "ellipse",
      "source": [
        [
          "src/Canvas.ts",
          865,
          18
        ]
      ],
      "id": 3888,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw an ellipse.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius [x, y] of the ellipse",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "rotation",
              "comment": "rotation of the ellipse in radian. Default is 0.",
              "type": "number",
              "default": "0"
            },
            {
              "name": "startAngle",
              "comment": "start angle of the ellipse. Default is 0.",
              "type": "number",
              "default": "0"
            },
            {
              "name": "endAngle",
              "comment": "end angle of the ellipse. Default is 2 PI.",
              "type": "number",
              "default": "Const.two_pi"
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "image",
      "source": [
        [
          "src/Canvas.ts",
          1045,
          16
        ]
      ],
      "id": 3950,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw an image.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "ptOrRect",
              "comment": "a target area to place the image. Either a Pt or numeric array specifying a position, or a Group or an Iterable<PtLike> with 2 Pt (top-left, bottom-right) that specifies a bounding box for resizing. Default is (0,0) at top-left.",
              "type": "PtLike | PtLikeIterable",
              "default": false
            },
            {
              "name": "img",
              "comment": "either an [Img](#link) instance or an [`CanvasImageSource`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasImageSource) instance (eg the image from `<img>`, `<video>` or `<canvas>`)",
              "type": "CanvasImageSource | Img",
              "default": false
            },
            {
              "name": "orig",
              "comment": "optionally a Group or an Iterable<PtLike> with 2 Pt (top-left, bottom-right) that specifies a cropping box in the original target.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "imageData",
      "source": [
        [
          "src/Canvas.ts",
          1099,
          20
        ]
      ],
      "id": 3961,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw ImageData on canvas",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "ptOrRect",
              "comment": "a target area to place the image. Either a Pt or numeric array specifying a position, or a Group or an Iterable<PtLike> with 2 Pt (top-left, bottom-right) that specifies a bounding box for resizing. Default is (0,0) at top-left.",
              "type": "PtLike | PtLikeIterable",
              "default": false
            },
            {
              "name": "img",
              "comment": "an ImageData object\n",
              "type": "ImageData",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "line",
      "source": [
        [
          "src/Canvas.ts",
          959,
          15
        ]
      ],
      "id": 3929,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a line or polyline.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a line\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "src/Canvas.ts",
          808,
          16
        ]
      ],
      "id": 3869,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a point.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "p",
              "comment": "a Pt object",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.point( p )`, `form.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "src/Canvas.ts",
          991,
          18
        ]
      ],
      "id": 3936,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a polygon.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a polygon\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "src/Canvas.ts",
          1014,
          15
        ]
      ],
      "id": 3943,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a rectangle.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> with 2 Pt specifying the top-left and bottom-right positions.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "src/Canvas.ts",
          925,
          17
        ]
      ],
      "id": 3920,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a square.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the square",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half size of the square\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "src/Canvas.ts",
          1127,
          15
        ]
      ],
      "id": 3970,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw text.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "canvas rendering context",
              "type": "CanvasRenderingContext2D",
              "default": false
            },
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            },
            {
              "name": "maxWidth",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [
    "VisualForm"
  ],
  "implements": []
}