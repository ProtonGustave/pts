{
  "name": "Rectangle",
  "source": [
    [
      "src/Op.ts",
      400,
      22
    ]
  ],
  "kind": "Class",
  "id": 1073,
  "comment": "Rectangle class provides static functions to create and operate on rectangles. A rectangle is usually represented as a Group of 2 Pts, marking the top-left and bottom-right corners of the rectangle.\nYou can use the static functions as-is, or apply the [`Group.op`](#link) or [`Pt.op`](#link) to enable functional programming.\nSee [Op guide](../guide/Op-0400.html) for details.",
  "constructor": [],
  "accessors": [],
  "methods": [
    {
      "name": "boundingBox",
      "source": [
        [
          "src/Op.ts",
          518,
          20
        ]
      ],
      "id": 1109,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given an array of rectangles, get a rectangle that bounds all of them.",
          "returns": "Group",
          "returns_comment": "the bounding rectangle as a Group\n",
          "parameters": [
            {
              "name": "rects",
              "comment": "an array of (Groups or Iterables<PtLike>) that represents a set of rectangles",
              "type": "Iterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "center",
      "source": [
        [
          "src/Op.ts",
          479,
          15
        ]
      ],
      "id": 1100,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the center of this rectangle.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "corners",
      "source": [
        [
          "src/Op.ts",
          491,
          16
        ]
      ],
      "id": 1103,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the 4 corners of this rectangle as a Group.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a Rectangle\n",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "from",
      "source": [
        [
          "src/Op.ts",
          409,
          13
        ]
      ],
      "id": 1074,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a rectangle from top-left anchor point. Same as [`Rectangle.fromTopLeft`](#link).",
          "returns": "Group",
          "returns_comment": "a Group of 2 Pts representing a rectangle\n",
          "parameters": [
            {
              "name": "topLeft",
              "comment": "top-left point",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "widthOrSize",
              "comment": "width as a number, or a Pt that defines its size",
              "type": "number | PtLike",
              "default": false
            },
            {
              "name": "height",
              "comment": "optional height as a number",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromCenter",
      "source": [
        [
          "src/Op.ts",
          434,
          19
        ]
      ],
      "id": 1084,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a rectangle given a center position and a size.",
          "returns": "Group",
          "returns_comment": "a Group of 2 Pts representing a rectangle\n",
          "parameters": [
            {
              "name": "center",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "widthOrSize",
              "comment": "width as a number, or a Pt that defines its size",
              "type": "number | PtLike",
              "default": false
            },
            {
              "name": "height",
              "comment": "optional height as a number",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromTopLeft",
      "source": [
        [
          "src/Op.ts",
          421,
          20
        ]
      ],
      "id": 1079,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a rectangle given a top-left position and a size.",
          "returns": "Group",
          "returns_comment": "a Group of 2 Pts representing a rectangle\n",
          "parameters": [
            {
              "name": "topLeft",
              "comment": "top-left point",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "widthOrSize",
              "comment": "width as a number, or a Pt that defines its size",
              "type": "number | PtLike",
              "default": false
            },
            {
              "name": "height",
              "comment": "optional height as a number",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "halves",
      "source": [
        [
          "src/Op.ts",
          566,
          15
        ]
      ],
      "id": 1119,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Subdivde a rectangle into 2 rectangles, by row or by column.",
          "returns": "Group[]",
          "returns_comment": "an array of 2 Groups of rectangles\n",
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a Rectangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "ratio",
              "comment": "a value between 0 to 1 to indicate the split ratio",
              "type": "number",
              "default": "0.5"
            },
            {
              "name": "asRows",
              "comment": "if `true`, split into 2 rows. Default is `false` which splits into 2 columns.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "hasIntersectRect2D",
      "source": [
        [
          "src/Op.ts",
          594,
          27
        ]
      ],
      "id": 1128,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if a rectangle is within the bounds of another rectangle.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect1",
              "comment": "a Group of 2 Pts representing a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "rect2",
              "comment": "a Group of 2 Pts representing a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "resetBoundingBox",
              "comment": "if `true`, reset the bounding box. Default is `false` which assumes the rect's first Pt at is its top-left corner.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "intersectRect2D",
      "source": [
        [
          "src/Op.ts",
          615,
          24
        ]
      ],
      "id": 1133,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "An easy way to get rectangle-rectangle intersection points. For more optimized implementation, store the rectangle's sides separately (eg, `Rectangle.sides()`) and use `Polygon.intersectPolygon2D()`.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect1",
              "comment": "a Group of 2 Pts representing a rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "rect2",
              "comment": "a Group of 2 Pts representing a rectangle\n",
              "type": "GroupLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "src/Op.ts",
          541,
          16
        ]
      ],
      "id": 1112,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert this rectangle into a Group representing a polygon. An alias for [`Rectangle.corners`](#link)",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a Rectangle\n",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "quadrants",
      "source": [
        [
          "src/Op.ts",
          551,
          18
        ]
      ],
      "id": 1115,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Subdivide a rectangle into 4 rectangles, one for each quadrant.",
          "returns": "Group[]",
          "returns_comment": "an array of 4 Groups of rectangles\n",
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a Rectangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "center",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sides",
      "source": [
        [
          "src/Op.ts",
          504,
          14
        ]
      ],
      "id": 1106,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the 4 sides of this rectangle as an array of 4 Groups.",
          "returns": "Group[]",
          "returns_comment": "an array of 4 Groups, each of which represents a line segment\n",
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a Rectangle",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "size",
      "source": [
        [
          "src/Op.ts",
          469,
          13
        ]
      ],
      "id": 1097,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the size of this rectangle as a Pt.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toCircle",
      "source": [
        [
          "src/Op.ts",
          446,
          17
        ]
      ],
      "id": 1089,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a new circle that either fits within or encloses the rectangle. Same as [`Circle.fromRect`](#link).",
          "returns": "Group",
          "returns_comment": "a Group that represents a circle\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a rectangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "within",
              "comment": "if `true`, the circle will be within the rectangle. If `false`, the circle will enclose the rectangle.",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toSquare",
      "source": [
        [
          "src/Op.ts",
          457,
          17
        ]
      ],
      "id": 1093,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a square that either fits within or encloses a rectangle.",
          "returns": "Group",
          "returns_comment": "a Group of 2 Pts representing a rectangle\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a rectangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "enclose",
              "comment": "if `true`, the square will enclose the rectangle. Default is `false`, which will fit the square inside the rectangle.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "withinBound",
      "source": [
        [
          "src/Op.ts",
          582,
          20
        ]
      ],
      "id": 1124,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Check if a point is within a rectangle.",
          "returns": "boolean",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group of 2 Pts representing a Rectangle",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "pt",
              "comment": "the point to check\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}