{
  "name": "SVGForm",
  "source": [
    [
      "src/Svg.ts",
      124,
      20
    ]
  ],
  "kind": "Class",
  "id": 7363,
  "comment": "**[Experimental]** SVGForm is an implementation of abstract class [`VisualForm`](#link). It provide methods to express Pts in [`SVGSpace`](#link).\nYou may extend SVGForm to implement your own expressions for SVGSpace. See out the [Space guide](../guide/Space-0500.html) for details.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/Svg.ts",
          150,
          35
        ]
      ],
      "id": 7385,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a new SVGForm. You may also use [`SVGSpace.getForm`](#link) to get a default form directly.",
          "returns": "SVGForm",
          "returns_comment": false,
          "parameters": [
            {
              "name": "space",
              "comment": "an instance of SVGSpace\n",
              "type": "SVGSpace",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "currentFont",
      "source": [
        [
          "src/Form.ts",
          52,
          17
        ]
      ],
      "id": 7535,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.currentFont",
      "comment": "Get the current font in use in this form.",
      "getter": {
        "type": "Font"
      },
      "setter": false
    },
    {
      "name": "filled",
      "source": [
        [
          "src/Form.ts",
          38,
          12
        ],
        [
          "src/Form.ts",
          39,
          12
        ]
      ],
      "id": 7527,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.filled",
      "comment": "Check whether this form currently has fill style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    },
    {
      "name": "ready",
      "source": [
        [
          "src/Form.ts",
          18,
          11
        ]
      ],
      "id": 7571,
      "flags": {},
      "overrides": false,
      "inherits": "Form.ready",
      "comment": "get whether the Form has received the Space's rendering context.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "space",
      "source": [
        [
          "src/Svg.ts",
          173,
          11
        ]
      ],
      "id": 7388,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the [`SVGSpace`](#link) instance that this form is associated with.",
      "getter": {
        "type": "SVGSpace"
      },
      "setter": false
    },
    {
      "name": "stroked",
      "source": [
        [
          "src/Form.ts",
          45,
          13
        ],
        [
          "src/Form.ts",
          46,
          13
        ]
      ],
      "id": 7531,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.stroked",
      "comment": "Check whether this form currently has stroke style.",
      "getter": {
        "type": "boolean"
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "b",
          "comment": "",
          "type": "boolean",
          "default": false
        }
      }
    }
  ],
  "methods": [
    {
      "name": "alpha",
      "source": [
        [
          "src/Svg.ts",
          192,
          7
        ]
      ],
      "id": 7394,
      "flags": {},
      "overrides": "VisualForm.alpha",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current alpha value.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "a",
              "comment": "alpha value between 0 and 1\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.alpha(0.6)`"
            }
          ]
        }
      ]
    },
    {
      "name": "arc",
      "source": [
        [
          "src/Svg.ts",
          485,
          5
        ]
      ],
      "id": 7464,
      "flags": {},
      "overrides": "VisualForm.arc",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw an arc.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the arc circle",
              "type": "number",
              "default": false
            },
            {
              "name": "startAngle",
              "comment": "start angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "endAngle",
              "comment": "end angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "src/Svg.ts",
          439,
          8
        ]
      ],
      "id": 7453,
      "flags": {},
      "overrides": "VisualForm.circle",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a circle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a circle with `[[position], [size]]`",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Circle.fromCenter`](./?p=Op_Circle#function_fromCenter)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "circles",
      "source": [
        [
          "src/Form.ts",
          160,
          9
        ]
      ],
      "id": 7556,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.circles",
      "signatures": [
        {
          "comment": "Draw multiple circles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cls",
      "source": [
        [
          "src/Svg.ts",
          241,
          5
        ]
      ],
      "id": 7406,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Add custom class to the created element.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "custom class name or `false` to reset it",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#f00\").cls(\"myClass\").rects(r)` `form.cls(false).circles(c)`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "fill",
      "source": [
        [
          "src/Svg.ts",
          203,
          6
        ]
      ],
      "id": 7397,
      "flags": {},
      "overrides": "VisualForm.fill",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current fill style. Provide a valid color string or `false` to specify no fill color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "a valid color string or `false` to specify no fill color.\n",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.fill(\"#F90\")`, `form.fill(\"rgba(0,0,0,.5\")`, `form.fill(false)`"
            }
          ]
        }
      ]
    },
    {
      "name": "fillOnly",
      "source": [
        [
          "src/Form.ts",
          92,
          10
        ]
      ],
      "id": 7542,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.fillOnly",
      "signatures": [
        {
          "comment": "Set current fill style and remove stroke style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "fill color as string or `false` to specify transparent.\n",
              "type": "string | boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "font",
      "source": [
        [
          "src/Svg.ts",
          260,
          6
        ]
      ],
      "id": 7409,
      "flags": {},
      "overrides": "VisualForm.font",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set the current font.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sizeOrFont",
              "comment": "either a number to specify font-size, or a `Font` object to specify all font properties",
              "type": "number | Font",
              "default": false
            },
            {
              "name": "weight",
              "comment": "Optional font-weight string such as \"bold\"",
              "type": "string",
              "default": false
            },
            {
              "name": "style",
              "comment": "Optional font-style string such as \"italic\"",
              "type": "string",
              "default": false
            },
            {
              "name": "lineHeight",
              "comment": "Optional line-height number suchas 1.5",
              "type": "number",
              "default": false
            },
            {
              "name": "family",
              "comment": "Optional font-family such as \"Helvetica, sans-serif\"",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.font( myFont )`, `form.font(14, \"bold\")`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "line",
      "source": [
        [
          "src/Svg.ts",
          557,
          6
        ]
      ],
      "id": 7484,
      "flags": {},
      "overrides": "VisualForm.line",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a line or polyline.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "lines",
      "source": [
        [
          "src/Form.ts",
          196,
          7
        ]
      ],
      "id": 7562,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.lines",
      "signatures": [
        {
          "comment": "Draw multiple lines at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "log",
      "source": [
        [
          "src/Svg.ts",
          700,
          5
        ]
      ],
      "id": 7521,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient way to draw some text on canvas for logging or debugging. It'll be draw on the top-left of the canvas as an overlay.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "txt",
              "comment": "text\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "nextID",
      "source": [
        [
          "src/Svg.ts",
          324,
          8
        ]
      ],
      "id": 7425,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get next available id in the current group.",
          "returns": "string",
          "returns_comment": "an id string\n",
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "src/Svg.ts",
          406,
          7
        ]
      ],
      "id": 7443,
      "flags": {},
      "overrides": "VisualForm.point",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draws a point.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.point( p )`, `form.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "points",
      "source": [
        [
          "src/Form.ts",
          138,
          8
        ]
      ],
      "id": 7551,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.points",
      "signatures": [
        {
          "comment": "Draw multiple points at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "an array of Pt or an array of number arrays",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": false
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "src/Svg.ts",
          614,
          9
        ]
      ],
      "id": 7502,
      "flags": {},
      "overrides": "VisualForm.polygon",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a polygon.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a polygon\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygons",
      "source": [
        [
          "src/Form.ts",
          212,
          10
        ]
      ],
      "id": 7565,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.polygons",
      "signatures": [
        {
          "comment": "Draw multiple polygons at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "src/Svg.ts",
          650,
          6
        ]
      ],
      "id": 7509,
      "flags": {},
      "overrides": "VisualForm.rect",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a rectangle.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> with 2 Pt specifying the top-left and bottom-right positions.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rects",
      "source": [
        [
          "src/Form.ts",
          229,
          7
        ]
      ],
      "id": 7568,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.rects",
      "signatures": [
        {
          "comment": "Draw multiple rectangles at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "An array of Groups of Pts\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reset",
      "source": [
        [
          "src/Svg.ts",
          282,
          7
        ]
      ],
      "id": 7416,
      "flags": {},
      "overrides": "VisualForm.reset",
      "inherits": false,
      "signatures": [
        {
          "comment": "Reset the context's common styles to this form's styles. This supports using multiple forms in the same space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "scope",
      "source": [
        [
          "src/Svg.ts",
          314,
          7
        ]
      ],
      "id": 7422,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set the current group scope to an item added into space, in order to keep track of any point, circle, etc created within it in the DOM.\nThe item must have an `animateID` property, so that elements created within the item will have generated IDs like \"item-{animateID}-{count}\".\nSee the svg section in [`Space guide`](../guide/Space-0500.html) to learn more about scope.",
          "returns": "object",
          "returns_comment": "this form's context\n",
          "parameters": [
            {
              "name": "item",
              "comment": "a [`IPlayer`](#link) object that's added to space (see [`Space.add`](#link)) and has an `animateID` property",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "src/Svg.ts",
          517,
          8
        ]
      ],
      "id": 7476,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw a square, given a center and its half-size.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "center Pt",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half-size\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "squares",
      "source": [
        [
          "src/Form.ts",
          169,
          9
        ]
      ],
      "id": 7559,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.squares",
      "signatures": [
        {
          "comment": "Draw multiple squares at once.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "groups",
              "comment": "an array of Groups that defines multiple circles\n",
              "type": "GroupLike[]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "stroke",
      "source": [
        [
          "src/Svg.ts",
          222,
          8
        ]
      ],
      "id": 7400,
      "flags": {},
      "overrides": "VisualForm.stroke",
      "inherits": false,
      "signatures": [
        {
          "comment": "Set current stroke style. Provide a valid color string or `false` to specify no stroke color.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "a valid color string or `false` to specify no stroke color.",
              "type": "string | boolean",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".",
              "type": "string",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "Optional string to set line cap style. Can be \"butt\", \"round\", or \"square\".\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`form.stroke(\"#F90\")`, `form.stroke(\"rgba(0,0,0,.5\")`, `form.stroke(false)`, `form.stroke(\"#000\", 0.5, 'round', 'square')`"
            }
          ]
        }
      ]
    },
    {
      "name": "strokeOnly",
      "source": [
        [
          "src/Form.ts",
          117,
          12
        ]
      ],
      "id": 7545,
      "flags": {},
      "overrides": false,
      "inherits": "VisualForm.strokeOnly",
      "signatures": [
        {
          "comment": "Set stroke style and remove fill style. (not implemented here  -- to be implemented in subclasses).",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "c",
              "comment": "stroke color as string or `false` to specify transparent.",
              "type": "string | boolean",
              "default": false
            },
            {
              "name": "width",
              "comment": "Optional value (can be floating point) to set line width",
              "type": "number",
              "default": false
            },
            {
              "name": "linejoin",
              "comment": "Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".",
              "type": "string",
              "default": false
            },
            {
              "name": "linecap",
              "comment": "Optional string to set line cap style. Can be \"butt\", \"round\", or \"square\".\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "styleTo",
      "source": [
        [
          "src/Svg.ts",
          181,
          9
        ]
      ],
      "id": 7390,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Update a style in current context. It will throw an Erorr if the style doesn't exist.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "k",
              "comment": "style key",
              "type": "any",
              "default": false
            },
            {
              "name": "v",
              "comment": "style value\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "src/Svg.ts",
          689,
          6
        ]
      ],
      "id": 7517,
      "flags": {},
      "overrides": "VisualForm.text",
      "inherits": false,
      "signatures": [
        {
          "comment": "Draw text on canvas.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "updateScope",
      "source": [
        [
          "src/Svg.ts",
          298,
          13
        ]
      ],
      "id": 7418,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Set this form's group scope by an ID, and optionally define the group's parent element. A group scope keeps track of elements by their generated IDs, and updates their properties as needed. See also [`SVGForm.scope`](#link).",
          "returns": "object",
          "returns_comment": "this form's context\n",
          "parameters": [
            {
              "name": "group_id",
              "comment": "a string to use as prefix for the group's id. For example, group_id \"hello\" will create elements with id like \"hello-1\", \"hello-2\", etc",
              "type": "string",
              "default": false
            },
            {
              "name": "group",
              "comment": "Optional DOM or SVG element to define this group's parent element",
              "type": "Element",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "arc",
      "source": [
        [
          "src/Svg.ts",
          456,
          12
        ]
      ],
      "id": 7456,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw an arc.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the arc circle",
              "type": "number",
              "default": false
            },
            {
              "name": "startAngle",
              "comment": "start angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "endAngle",
              "comment": "end angle of the arc",
              "type": "number",
              "default": false
            },
            {
              "name": "cc",
              "comment": "an optional boolean value to specify if it should be drawn clockwise (`false`) or counter-clockwise (`true`). Default is clockwise.\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circle",
      "source": [
        [
          "src/Svg.ts",
          419,
          15
        ]
      ],
      "id": 7448,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a circle.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the circle",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the circle\n",
              "type": "number",
              "default": "10"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getID",
      "source": [
        [
          "src/Svg.ts",
          335,
          14
        ]
      ],
      "id": 7427,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to generate an ID string based on a context object.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object for an SVGForm\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "line",
      "source": [
        [
          "src/Svg.ts",
          529,
          13
        ]
      ],
      "id": 7480,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a line or polyline.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "point",
      "source": [
        [
          "src/Svg.ts",
          390,
          14
        ]
      ],
      "id": 7437,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a point.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "a Pt object or numeric array",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "radius",
              "comment": "radius of the point. Default is 5.",
              "type": "number",
              "default": "5"
            },
            {
              "name": "shape",
              "comment": "The shape of the point. Defaults to \"square\", but it can be \"circle\" or a custom shape function in your own implementation.",
              "type": "string",
              "default": "\"square\""
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`SVGForm.point( p )`, `SVGForm.point( p, 10, \"circle\" )`\n"
            }
          ]
        }
      ]
    },
    {
      "name": "pointsString",
      "source": [
        [
          "src/Svg.ts",
          588,
          31
        ]
      ],
      "id": 7492,
      "flags": {
        "isProtected": true,
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given a list of points, return a space-separated string",
          "returns": "{ count:`number`, string:`string` }",
          "returns_comment": "an object of {string, count}\n",
          "parameters": [
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike>",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "polygon",
      "source": [
        [
          "src/Svg.ts",
          604,
          16
        ]
      ],
      "id": 7498,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw polygon.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> representing a polygon\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rect",
      "source": [
        [
          "src/Svg.ts",
          626,
          13
        ]
      ],
      "id": 7505,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a rectangle.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pts",
              "comment": "a Group or an Iterable<PtLike> with 2 Pt specifying the top-left and bottom-right positions.\n",
              "type": "PtLikeIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scopeID",
      "source": [
        [
          "src/Svg.ts",
          344,
          16
        ]
      ],
      "id": 7430,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to generate an ID string for a scope, based on an [`IPlayer`](#link) object in the Space.",
          "returns": "string",
          "returns_comment": false,
          "parameters": [
            {
              "name": "item",
              "comment": "a [`IPlayer`](#link) object that's added to space (see [`Space.add`](#link)) and has an `animateID` property\n",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "square",
      "source": [
        [
          "src/Svg.ts",
          498,
          15
        ]
      ],
      "id": 7471,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw a square.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "center position of the square",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "halfsize",
              "comment": "half size of the square\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "style",
      "source": [
        [
          "src/Svg.ts",
          357,
          14
        ]
      ],
      "id": 7433,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to help adding style object to an element.\nNote that this put all styles into `style` attribute instead of individual svg attributes, so that the styles can be parsed by Adobe Illustrator.",
          "returns": "Element",
          "returns_comment": "this DOM element\n",
          "parameters": [
            {
              "name": "elem",
              "comment": "A DOM element to add to",
              "type": "SVGElement",
              "default": false
            },
            {
              "name": "styles",
              "comment": "an object of style properties",
              "type": "object",
              "default": false
            }
          ],
          "tags": [
            {
              "tag": "example",
              "text": "`SVGForm.style(elem, {fill: \"#f90\", stroke: false})`"
            }
          ]
        }
      ]
    },
    {
      "name": "text",
      "source": [
        [
          "src/Svg.ts",
          664,
          13
        ]
      ],
      "id": 7512,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to draw text.",
          "returns": "SVGElement",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ctx",
              "comment": "a context object of SVGForm",
              "type": "DOMFormContext",
              "default": false
            },
            {
              "name": "pt",
              "comment": "",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "txt",
              "comment": "",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "domID",
      "source": [
        [
          "src/Svg.ts",
          147,
          14
        ]
      ],
      "id": 7382,
      "flags": {
        "isStatic": true
      },
      "type": "domID",
      "overrides": false,
      "inherits": false,
      "comment": ""
    },
    {
      "name": "groupID",
      "source": [
        [
          "src/Svg.ts",
          146,
          16
        ]
      ],
      "id": 7381,
      "flags": {
        "isStatic": true
      },
      "type": "groupID",
      "overrides": false,
      "inherits": false,
      "comment": ""
    }
  ],
  "flags": {},
  "extends": [
    "VisualForm"
  ],
  "implements": []
}