{
  "name": "MultiTouchSpace",
  "source": [
    [
      "src/Space.ts",
      282,
      37
    ]
  ],
  "kind": "Class",
  "id": 3150,
  "comment": "MultiTouchSpace is an abstract class that extends [`Space`](#link) to support user interactions via touch events.\nIt's extended through subclasses such as [`CanvasSpace`](#link) and [`SVGSpace`](#link).",
  "constructor": [],
  "accessors": [
    {
      "name": "center",
      "source": [
        [
          "src/Space.ts",
          239,
          12
        ]
      ],
      "id": 3275,
      "flags": {},
      "overrides": false,
      "inherits": "Space.center",
      "comment": "The center of this space's bounding box.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "customRendering",
      "source": [
        [
          "src/Space.ts",
          208,
          21
        ],
        [
          "src/Space.ts",
          209,
          21
        ]
      ],
      "id": 3255,
      "flags": {},
      "overrides": false,
      "inherits": "Space.customRendering",
      "comment": "Set a custom rendering function `fn(graphics_context, canvas_space)` if needed.",
      "getter": {
        "type": ""
      },
      "setter": {
        "type": "void",
        "parameters": {
          "name": "f",
          "comment": "",
          "type": " Fn(context:any, self:Space)",
          "default": false
        }
      }
    },
    {
      "name": "height",
      "source": [
        [
          "src/Space.ts",
          251,
          12
        ]
      ],
      "id": 3279,
      "flags": {},
      "overrides": false,
      "inherits": "Space.height",
      "comment": "The height of this space's bounding box.",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "innerBound",
      "source": [
        [
          "src/Space.ts",
          227,
          23
        ]
      ],
      "id": 3271,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": "Space.innerBound",
      "comment": "The inner bounding box of the space, excluding its positions.",
      "getter": {
        "type": "Bound"
      },
      "setter": false
    },
    {
      "name": "isPlaying",
      "source": [
        [
          "src/Space.ts",
          215,
          15
        ]
      ],
      "id": 3267,
      "flags": {},
      "overrides": false,
      "inherits": "Space.isPlaying",
      "comment": "Indicate whether the animation is playing.",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "outerBound",
      "source": [
        [
          "src/Space.ts",
          221,
          16
        ]
      ],
      "id": 3269,
      "flags": {},
      "overrides": false,
      "inherits": "Space.outerBound",
      "comment": "The outer bounding box which includes its positions.",
      "getter": {
        "type": "Bound"
      },
      "setter": false
    },
    {
      "name": "pointer",
      "source": [
        [
          "src/Space.ts",
          297,
          20
        ]
      ],
      "id": 3156,
      "flags": {
        "isPublic": true
      },
      "overrides": false,
      "inherits": false,
      "comment": "Get the mouse or touch pointer that stores the last action.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "size",
      "source": [
        [
          "src/Space.ts",
          233,
          10
        ]
      ],
      "id": 3273,
      "flags": {},
      "overrides": false,
      "inherits": "Space.size",
      "comment": "The size of this space's bounding box.",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "width",
      "source": [
        [
          "src/Space.ts",
          245,
          11
        ]
      ],
      "id": 3277,
      "flags": {},
      "overrides": false,
      "inherits": "Space.width",
      "comment": "The width of this space's bounding box.",
      "getter": {
        "type": "number"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "add",
      "source": [
        [
          "src/Space.ts",
          54,
          5
        ]
      ],
      "id": 3225,
      "flags": {},
      "overrides": false,
      "inherits": "Space.add",
      "signatures": [
        {
          "comment": "Add an [`IPlayer`](#link) object or a [`AnimateCallbackFn`](#link) callback function to handle events in this Space. An IPlayer is an object with the following callback functions:\n- required: `animate: fn( time, ftime, space )`\n- optional: `start: fn(bound, space)`\n- optional: `resize: fn( size, event )`\n- optional: `action: fn( type, x, y, event )`\nSubclasses of Space may define other callback functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p",
              "comment": "",
              "type": "IPlayer | AnimateCallbackFn",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "bindCanvas",
      "source": [
        [
          "src/Space.ts",
          309,
          12
        ]
      ],
      "id": 3158,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Bind event listener in canvas element. You can also use [`MultiTouchSpace.bindMouse`](#link) or [`MultiTouchSpace.bindTouch`](#link) to bind mouse or touch events conveniently.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "evt",
              "comment": "an event string such as \"mousedown\"",
              "type": "string",
              "default": false
            },
            {
              "name": "callback",
              "comment": "callback function for this event",
              "type": "EventListener",
              "default": false
            },
            {
              "name": "options",
              "comment": "options for [addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).\n",
              "type": "any",
              "default": "{}"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "bindMouse",
      "source": [
        [
          "src/Space.ts",
          332,
          11
        ]
      ],
      "id": 3168,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient method to bind (or unbind) all mouse events in canvas element.\nAll [`IPlayer`](#link) objects added to this space that implement an `action` callback property will receive mouse event callbacks.\nThe types of mouse actions are defined by [`UIPointerActions`](#link) constants: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "_bind",
              "comment": "a boolean value to bind mouse events if set to `true`. If `false`, all mouse events will be unbound. Default is true.",
              "type": "boolean",
              "default": "true"
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Space.add`](#link)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "bindTouch",
      "source": [
        [
          "src/Space.ts",
          364,
          11
        ]
      ],
      "id": 3171,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient method to bind (or unbind) all touch events in canvas element.\nAll [`IPlayer`](#link) objects added to this space that implement an `action` callback property will receive touch event callbacks.\nThe types of mouse actions are defined by [`UIPointerActions`](#link) constants: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "bind",
              "comment": "a boolean value to bind touch events if set to `true`. If `false`, all mouse events will be unbound. Default is true.",
              "type": "boolean",
              "default": "true"
            },
            {
              "name": "passive",
              "comment": "a boolean value to set passive mode, ie, it won't block scrolling. Default is false.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": [
            {
              "tag": "see",
              "text": "[`Space.add`](#link)\n"
            }
          ]
        }
      ]
    },
    {
      "name": "clear",
      "source": [
        [
          "src/Space.ts",
          265,
          16
        ]
      ],
      "id": 3285,
      "flags": {
        "isAbstract": true
      },
      "overrides": false,
      "inherits": "Space.clear",
      "signatures": [
        {
          "comment": "clear all contents in the space. To be implemented in subclasses.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "getForm",
      "source": [
        [
          "src/Space.ts",
          271,
          18
        ]
      ],
      "id": 3287,
      "flags": {
        "isAbstract": true
      },
      "overrides": false,
      "inherits": "Space.getForm",
      "signatures": [
        {
          "comment": "Get a default form for drawing in this space. To be implemented in subclasses.",
          "returns": "Form",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "pause",
      "source": [
        [
          "src/Space.ts",
          160,
          7
        ]
      ],
      "id": 3241,
      "flags": {},
      "overrides": false,
      "inherits": "Space.pause",
      "signatures": [
        {
          "comment": "Pause the animation.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "toggle",
              "comment": "a boolean value to set if this function call should be a toggle (between pause and resume)\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "play",
      "source": [
        [
          "src/Space.ts",
          95,
          6
        ]
      ],
      "id": 3233,
      "flags": {},
      "overrides": false,
      "inherits": "Space.play",
      "signatures": [
        {
          "comment": "Main play loop. This implements `window.requestAnimationFrame` and calls it recursively.\nYou may override this `play()` function to implement your own animation loop.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "time",
              "comment": "current time\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "playItems",
      "source": [
        [
          "src/Space.ts",
          133,
          21
        ]
      ],
      "id": 3238,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "Space.playItems",
      "signatures": [
        {
          "comment": "Main animate function. This calls all the items to perform.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "time",
              "comment": "current time\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "playOnce",
      "source": [
        [
          "src/Space.ts",
          189,
          10
        ]
      ],
      "id": 3249,
      "flags": {},
      "overrides": false,
      "inherits": "Space.playOnce",
      "signatures": [
        {
          "comment": "Play animation loop, and then stop after `duration` time has passed.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "duration",
              "comment": "a value in millisecond to specify a time period to play before stopping, or `-1` to play forever\n",
              "type": "number",
              "default": "5000"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "refresh",
      "source": [
        [
          "src/Space.ts",
          39,
          9
        ]
      ],
      "id": 3222,
      "flags": {},
      "overrides": false,
      "inherits": "Space.refresh",
      "signatures": [
        {
          "comment": "Set whether the rendering should be repainted on each frame.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "b",
              "comment": "a boolean value to set whether to repaint each frame\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "remove",
      "source": [
        [
          "src/Space.ts",
          75,
          8
        ]
      ],
      "id": 3228,
      "flags": {},
      "overrides": false,
      "inherits": "Space.remove",
      "signatures": [
        {
          "comment": "Remove a player from this Space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "player",
              "comment": "an IPlayer that has an `animateID` property\n",
              "type": "IPlayer",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "removeAll",
      "source": [
        [
          "src/Space.ts",
          84,
          11
        ]
      ],
      "id": 3231,
      "flags": {},
      "overrides": false,
      "inherits": "Space.removeAll",
      "signatures": [
        {
          "comment": "Remove all players from this Space.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "render",
      "source": [
        [
          "src/Space.ts",
          199,
          18
        ]
      ],
      "id": 3252,
      "flags": {
        "isProtected": true
      },
      "overrides": false,
      "inherits": "Space.render",
      "signatures": [
        {
          "comment": "Custom rendering.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "context",
              "comment": "rendering context\n",
              "type": "any",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "replay",
      "source": [
        [
          "src/Space.ts",
          123,
          8
        ]
      ],
      "id": 3236,
      "flags": {},
      "overrides": false,
      "inherits": "Space.replay",
      "signatures": [
        {
          "comment": "Replay the animation after [`Space.stop`](#link). This resets the end-time counter.\nYou may also use [`Space.pause`](#link) and [`resume`](#link) for temporary pause.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "resize",
      "source": [
        [
          "src/Space.ts",
          259,
          17
        ]
      ],
      "id": 3281,
      "flags": {
        "isAbstract": true
      },
      "overrides": false,
      "inherits": "Space.resize",
      "signatures": [
        {
          "comment": "Resize the space. To be implemented in subclasses.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "b",
              "comment": "a Bound representing the position and size of the space",
              "type": "Bound",
              "default": false
            },
            {
              "name": "evt",
              "comment": "event\n",
              "type": "Event",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "resume",
      "source": [
        [
          "src/Space.ts",
          169,
          8
        ]
      ],
      "id": 3244,
      "flags": {},
      "overrides": false,
      "inherits": "Space.resume",
      "signatures": [
        {
          "comment": "Resume the pause animation.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "stop",
      "source": [
        [
          "src/Space.ts",
          179,
          6
        ]
      ],
      "id": 3246,
      "flags": {},
      "overrides": false,
      "inherits": "Space.stop",
      "signatures": [
        {
          "comment": "Specify when the animation should stop: immediately, after a time period, or never stops.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "t",
              "comment": "a value in millisecond to specify a time period to play before stopping, or `-1` to play forever, or `0` to end immediately. Default is 0 which will stop the animation immediately.\n",
              "type": "number",
              "default": "0"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "touchesToPoints",
      "source": [
        [
          "src/Space.ts",
          390,
          17
        ]
      ],
      "id": 3175,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A convenient method to convert the touch points in a touch event to an array of Pts.",
          "returns": "Pt[]",
          "returns_comment": "an array of Pt, whose origin position (0,0) is offset to the top-left of this space\n",
          "parameters": [
            {
              "name": "evt",
              "comment": "a touch event which contains touches, changedTouches, and targetTouches list",
              "type": "TouchEvent",
              "default": false
            },
            {
              "name": "which",
              "comment": "a string to select a touches list: \"touches\", \"changedTouches\", or \"targetTouches\". Default is \"touches\"",
              "type": "TouchPointsKey",
              "default": "\"touches\""
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "unbindCanvas",
      "source": [
        [
          "src/Space.ts",
          320,
          14
        ]
      ],
      "id": 3163,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Unbind a callback from the event listener.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "evt",
              "comment": "an event string such as \"mousedown\"",
              "type": "string",
              "default": false
            },
            {
              "name": "callback",
              "comment": "callback function to unbind",
              "type": "EventListener",
              "default": false
            },
            {
              "name": "options",
              "comment": "options for [removeEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener). This should match the options set in bindCanvas.\n",
              "type": "any",
              "default": "{}"
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [
    {
      "name": "bound",
      "source": [
        [
          "src/Space.ts",
          16,
          17
        ]
      ],
      "id": 3211,
      "flags": {
        "isProtected": true
      },
      "type": "bound",
      "overrides": false,
      "inherits": "Space.bound",
      "comment": ""
    },
    {
      "name": "id",
      "source": [
        [
          "src/Space.ts",
          15,
          4
        ]
      ],
      "id": 3210,
      "flags": {},
      "type": "id",
      "overrides": false,
      "inherits": "Space.id",
      "comment": ""
    },
    {
      "name": "playerCount",
      "source": [
        [
          "src/Space.ts",
          20,
          23
        ]
      ],
      "id": 3217,
      "flags": {
        "isProtected": true
      },
      "type": "playerCount",
      "overrides": false,
      "inherits": "Space.playerCount",
      "comment": ""
    },
    {
      "name": "players",
      "source": [
        [
          "src/Space.ts",
          19,
          19
        ]
      ],
      "id": 3216,
      "flags": {
        "isProtected": true
      },
      "type": "players",
      "overrides": false,
      "inherits": "Space.players",
      "comment": ""
    }
  ],
  "flags": {
    "isAbstract": true
  },
  "extends": [
    "Space"
  ],
  "implements": []
}