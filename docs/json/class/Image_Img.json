{
  "name": "Img",
  "source": [
    [
      "src/Image.ts",
      7,
      16
    ]
  ],
  "kind": "Class",
  "id": 3304,
  "comment": "Img provides convenient functions to support image operations on HTML Canvas and [`CanvasSpace`](#link). Combine this with other Pts functions to experiment with visual forms that integrate bitmaps and vector graphics.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/Image.ts",
          16,
          30
        ]
      ],
      "id": 3312,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create an Img",
          "returns": "Img",
          "returns_comment": false,
          "parameters": [
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "pixelScale",
              "comment": "Set internal canvas' scale in relation to original image size. Useful for retina screens. Use `CanvasSpace.pixelScale` to pass current scale.",
              "type": "number",
              "default": "1"
            },
            {
              "name": "crossOrigin",
              "comment": "an optional parameter to enable loading cross-domain images if set to true. The image server's configuration must also be set correctly. For more, see [this documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image).\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "canvas",
      "source": [
        [
          "src/Image.ts",
          265,
          12
        ]
      ],
      "id": 3375,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas",
      "getter": {
        "type": "HTMLCanvasElement"
      },
      "setter": false
    },
    {
      "name": "canvasSize",
      "source": [
        [
          "src/Image.ts",
          313,
          16
        ]
      ],
      "id": 3387,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get size of the canvas",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "ctx",
      "source": [
        [
          "src/Image.ts",
          281,
          9
        ]
      ],
      "id": 3379,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas' context. You can use this to draw directly on canvas, or create a new [CanvasForm](#link) instance with it.",
      "getter": {
        "type": "CanvasRenderingContext2D"
      },
      "setter": false
    },
    {
      "name": "current",
      "source": [
        [
          "src/Image.ts",
          249,
          13
        ]
      ],
      "id": 3371,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get current image source. If editable, this will return the canvas, otherwise it will return the original image.",
      "getter": {
        "type": "CanvasImageSource"
      },
      "setter": false
    },
    {
      "name": "data",
      "source": [
        [
          "src/Image.ts",
          273,
          10
        ]
      ],
      "id": 3377,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas' ImageData",
      "getter": {
        "type": "ImageData"
      },
      "setter": false
    },
    {
      "name": "image",
      "source": [
        [
          "src/Image.ts",
          257,
          11
        ]
      ],
      "id": 3373,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the original image",
      "getter": {
        "type": "HTMLImageElement"
      },
      "setter": false
    },
    {
      "name": "imageSize",
      "source": [
        [
          "src/Image.ts",
          305,
          15
        ]
      ],
      "id": 3385,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get size of the original image",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "loaded",
      "source": [
        [
          "src/Image.ts",
          289,
          12
        ]
      ],
      "id": 3381,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get whether the image is loaded",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "pixelScale",
      "source": [
        [
          "src/Image.ts",
          297,
          16
        ]
      ],
      "id": 3383,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get pixel density scale",
      "getter": {
        "type": "number"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "bitmap",
      "source": [
        [
          "src/Image.ts",
          98,
          8
        ]
      ],
      "id": 3334,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get an efficient, readonly bitmap of the current canvas.",
          "returns": "Promise",
          "returns_comment": "a Promise that resolves to an ImageBitmap\n",
          "parameters": [
            {
              "name": "size",
              "comment": "Optional size to crop",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cleanup",
      "source": [
        [
          "src/Image.ts",
          192,
          9
        ]
      ],
      "id": 3357,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Remove the elements and data associated with this Img.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "crop",
      "source": [
        [
          "src/Image.ts",
          170,
          6
        ]
      ],
      "id": 3351,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Crop an area of the image.",
          "returns": "ImageData",
          "returns_comment": false,
          "parameters": [
            {
              "name": "box",
              "comment": "bounding box\n",
              "type": "Bound",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "filter",
      "source": [
        [
          "src/Image.ts",
          181,
          8
        ]
      ],
      "id": 3354,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Apply filters such as blur and grayscale to the canvas image. The original image is unchanged until `sync()`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "css",
              "comment": "a css filter string such as \"blur(10px) | contrast(200%)\". See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter#browser_compatibility) for a list of filter functions.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "load",
      "source": [
        [
          "src/Image.ts",
          53,
          6
        ]
      ],
      "id": 3327,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Load an image.",
          "returns": "Promise",
          "returns_comment": "a Promise that resolves to an Img\n",
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "pixel",
      "source": [
        [
          "src/Image.ts",
          129,
          7
        ]
      ],
      "id": 3339,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the RGBA values of a pixel in the image",
          "returns": "Pt",
          "returns_comment": "values of the pixel at the specific position\n",
          "parameters": [
            {
              "name": "p",
              "comment": "position of the pixel",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "rescale",
              "comment": "Specify if the pixel position should be scaled. Usually use rescale when tracking image and don't rescale when tracking canvas. You may also set a custom scale value.",
              "type": "boolean | number",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "resize",
      "source": [
        [
          "src/Image.ts",
          158,
          8
        ]
      ],
      "id": 3347,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Resize the canvas image. The original image is unchanged until `sync()`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sizeOrScale",
              "comment": "A PtLike array specifying either [x, y] scales or [x, y] sizes.",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "asScale",
              "comment": "If true, treat the first parameter as scales. Otherwise, treat it as specific sizes.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sync",
      "source": [
        [
          "src/Image.ts",
          108,
          6
        ]
      ],
      "id": 3337,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Replace the image with the current canvas data. For example, you can use CanvasForm's static functions to draw on `this.ctx` and then update the current image.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toBase64",
      "source": [
        [
          "src/Image.ts",
          231,
          10
        ]
      ],
      "id": 3367,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Export current canvas image as base64 string",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toBlob",
      "source": [
        [
          "src/Image.ts",
          239,
          8
        ]
      ],
      "id": 3369,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Export current canvas image as a blob",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "fromBlob",
      "source": [
        [
          "src/Image.ts",
          204,
          17
        ]
      ],
      "id": 3359,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a blob url that can be passed to `Img.load`",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [
            {
              "name": "blob",
              "comment": "an image blob such as `new Blob([my_Uint8Array], {type: 'image/png'})`",
              "type": "Blob",
              "default": false
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.\n",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "pixelScale",
              "comment": "",
              "type": "number",
              "default": "1"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getPixel",
      "source": [
        [
          "src/Image.ts",
          141,
          17
        ]
      ],
      "id": 3343,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given an ImaegData object and a position, return the RGBA pixel value at that position.",
          "returns": "Pt",
          "returns_comment": "values of the pixel at the specific position\n",
          "parameters": [
            {
              "name": "imgData",
              "comment": "an ImageData object",
              "type": "ImageData",
              "default": false
            },
            {
              "name": "p",
              "comment": "a position on the image",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "imageDataToBlob",
      "source": [
        [
          "src/Image.ts",
          214,
          24
        ]
      ],
      "id": 3364,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert ImageData object to a Blob, which you can then create an Img instance via [`Img.fromBlob`](#link). Note that the resulting image's dimensions will not account for pixel density.",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [
            {
              "name": "data",
              "comment": "\n",
              "type": "ImageData",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "load",
      "source": [
        [
          "src/Image.ts",
          39,
          13
        ]
      ],
      "id": 3317,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to create an Img with an optional ready callback. The Img instance will returned immediately before the image is loaded.",
          "returns": "Img",
          "returns_comment": false,
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "pixelScale",
              "comment": "Set internal canvas' scale in relation to original image size. Useful for retina screens. Use `CanvasSpace.pixelScale` to pass current scale.",
              "type": "number",
              "default": "1"
            },
            {
              "name": "ready",
              "comment": "An optional ready callback function\n",
              "type": " Fn(img:any)",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}