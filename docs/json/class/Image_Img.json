{
  "name": "Img",
  "source": [
    [
      "src/Image.ts",
      9,
      16
    ]
  ],
  "kind": "Class",
  "id": 3421,
  "comment": "Img provides convenient functions to support image operations on HTML Canvas and [`CanvasSpace`](#link). Combine this with other Pts functions to experiment with visual forms that integrate bitmaps and vector graphics.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/Image.ts",
          20,
          31
        ]
      ],
      "id": 3430,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create an Img",
          "returns": "Img",
          "returns_comment": false,
          "parameters": [
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "space",
              "comment": "Set the `CanvasSpace` reference. This is optional but will make sure the image's pixelScale match the canvas and set the context for creating pattern.",
              "type": "CanvasSpace",
              "default": false
            },
            {
              "name": "crossOrigin",
              "comment": "an optional parameter to enable loading cross-domain images if set to true. The image server's configuration must also be set correctly. For more, see [this documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image).\n",
              "type": "boolean",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "canvas",
      "source": [
        [
          "src/Image.ts",
          360,
          12
        ]
      ],
      "id": 3520,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas",
      "getter": {
        "type": "HTMLCanvasElement"
      },
      "setter": false
    },
    {
      "name": "canvasSize",
      "source": [
        [
          "src/Image.ts",
          412,
          16
        ]
      ],
      "id": 3532,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get size of the canvas",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "ctx",
      "source": [
        [
          "src/Image.ts",
          376,
          9
        ]
      ],
      "id": 3524,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas' context. You can use this to draw directly on canvas, or create a new [CanvasForm](#link) instance with it.",
      "getter": {
        "type": "CanvasRenderingContext2D"
      },
      "setter": false
    },
    {
      "name": "current",
      "source": [
        [
          "src/Image.ts",
          344,
          13
        ]
      ],
      "id": 3516,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get current image source. If editable, this will return the canvas, otherwise it will return the original image.",
      "getter": {
        "type": "CanvasImageSource"
      },
      "setter": false
    },
    {
      "name": "data",
      "source": [
        [
          "src/Image.ts",
          368,
          10
        ]
      ],
      "id": 3522,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the internal canvas' ImageData",
      "getter": {
        "type": "ImageData"
      },
      "setter": false
    },
    {
      "name": "image",
      "source": [
        [
          "src/Image.ts",
          352,
          11
        ]
      ],
      "id": 3518,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the original image",
      "getter": {
        "type": "HTMLImageElement"
      },
      "setter": false
    },
    {
      "name": "imageSize",
      "source": [
        [
          "src/Image.ts",
          400,
          15
        ]
      ],
      "id": 3530,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get size of the original image",
      "getter": {
        "type": "Pt"
      },
      "setter": false
    },
    {
      "name": "loaded",
      "source": [
        [
          "src/Image.ts",
          384,
          12
        ]
      ],
      "id": 3526,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get whether the image is loaded",
      "getter": {
        "type": "boolean"
      },
      "setter": false
    },
    {
      "name": "pixelScale",
      "source": [
        [
          "src/Image.ts",
          392,
          16
        ]
      ],
      "id": 3528,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get pixel density scale",
      "getter": {
        "type": "number"
      },
      "setter": false
    },
    {
      "name": "scaledMatrix",
      "source": [
        [
          "src/Image.ts",
          422,
          18
        ]
      ],
      "id": 3534,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get a Mat instance with a scale transform based on current `pixelScale`.\nThis can be useful for generating a domMatrix for transforming patterns consistently across different pixel-density screens.",
      "getter": {
        "type": "Mat"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "bitmap",
      "source": [
        [
          "src/Image.ts",
          167,
          8
        ]
      ],
      "id": 3473,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get an efficient, readonly bitmap of the current canvas.",
          "returns": "Promise",
          "returns_comment": "a Promise that resolves to an ImageBitmap\n",
          "parameters": [
            {
              "name": "size",
              "comment": "Optional size to crop",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "cleanup",
      "source": [
        [
          "src/Image.ts",
          274,
          9
        ]
      ],
      "id": 3500,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Remove the elements and data associated with this Img.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "crop",
      "source": [
        [
          "src/Image.ts",
          252,
          6
        ]
      ],
      "id": 3494,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Crop an area of the image.",
          "returns": "ImageData",
          "returns_comment": false,
          "parameters": [
            {
              "name": "box",
              "comment": "bounding box\n",
              "type": "Bound",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "filter",
      "source": [
        [
          "src/Image.ts",
          263,
          8
        ]
      ],
      "id": 3497,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Apply filters such as blur and grayscale to the canvas image. The original image is unchanged until `sync()`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "css",
              "comment": "a css filter string such as \"blur(10px) | contrast(200%)\". See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter#browser_compatibility) for a list of filter functions.\n",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getForm",
      "source": [
        [
          "src/Image.ts",
          334,
          9
        ]
      ],
      "id": 3514,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a CanvasForm for drawing on the internal canvas if this Img is editable",
          "returns": "CanvasForm",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "initCanvas",
      "source": [
        [
          "src/Image.ts",
          146,
          12
        ]
      ],
      "id": 3468,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Initiate an editable canvas",
          "returns": "void",
          "returns_comment": false,
          "parameters": [
            {
              "name": "width",
              "comment": "width of canvas",
              "type": "number",
              "default": false
            },
            {
              "name": "height",
              "comment": "height of canvas",
              "type": "number",
              "default": false
            },
            {
              "name": "canvasScale",
              "comment": "pixel scale\n",
              "type": "number | PtLike",
              "default": "1"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "load",
      "source": [
        [
          "src/Image.ts",
          99,
          6
        ]
      ],
      "id": 3461,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Load an image.",
          "returns": "Promise",
          "returns_comment": "a Promise that resolves to an Img\n",
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "pattern",
      "source": [
        [
          "src/Image.ts",
          180,
          9
        ]
      ],
      "id": 3476,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a canvas pattern for `fill()`",
          "returns": "CanvasPattern",
          "returns_comment": "a `CanvasPattern` instance for use in `fill()`\n",
          "parameters": [
            {
              "name": "reptition",
              "comment": "set how the pattern should repeat-fill",
              "type": "CanvasPatternRepetition",
              "default": "\"repeat\""
            },
            {
              "name": "dynamic",
              "comment": "If true, use this Img's internal canvas content as pattern fill. This enables the pattern to update dynamically.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "pixel",
      "source": [
        [
          "src/Image.ts",
          211,
          7
        ]
      ],
      "id": 3482,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the RGBA values of a pixel in the image",
          "returns": "Pt",
          "returns_comment": "values of the pixel at the specific position\n",
          "parameters": [
            {
              "name": "p",
              "comment": "position of the pixel",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "rescale",
              "comment": "Specify if the pixel position should be scaled. Usually use rescale when tracking image and don't rescale when tracking canvas. You may also set a custom scale value.",
              "type": "boolean | number",
              "default": "true"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "resize",
      "source": [
        [
          "src/Image.ts",
          240,
          8
        ]
      ],
      "id": 3490,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Resize the canvas image. The original image is unchanged until `sync()`.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sizeOrScale",
              "comment": "A PtLike array specifying either [x, y] scales or [x, y] sizes.",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "asScale",
              "comment": "If true, treat the first parameter as scales. Otherwise, treat it as specific sizes.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "sync",
      "source": [
        [
          "src/Image.ts",
          190,
          6
        ]
      ],
      "id": 3480,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Replace the image with the current canvas data. For example, you can use CanvasForm's static functions to draw on `this.ctx` and then update the current image.\nTo display the internal canvas, you can also use `form.image( img.canvas )` directly.",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toBase64",
      "source": [
        [
          "src/Image.ts",
          316,
          10
        ]
      ],
      "id": 3510,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Export current canvas image as base64 string",
          "returns": "string",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "toBlob",
      "source": [
        [
          "src/Image.ts",
          324,
          8
        ]
      ],
      "id": 3512,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Export current canvas image as a blob",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "blank",
      "source": [
        [
          "src/Image.ts",
          86,
          14
        ]
      ],
      "id": 3456,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create an editable blank image",
          "returns": "Img",
          "returns_comment": false,
          "parameters": [
            {
              "name": "size",
              "comment": "of image",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "space",
              "comment": "Set the `CanvasSpace` reference. This is optional but will make sure the image's pixelScale match the canvas and set the context for creating pattern.",
              "type": "CanvasSpace",
              "default": false
            },
            {
              "name": "scale",
              "comment": "Optionally set a specific pixel scale (density) of the image canvas.\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromBlob",
      "source": [
        [
          "src/Image.ts",
          286,
          17
        ]
      ],
      "id": 3502,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a blob url that can be passed to `Img.load`",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [
            {
              "name": "blob",
              "comment": "an image blob such as `new Blob([my_Uint8Array], {type: 'image/png'})`",
              "type": "Blob",
              "default": false
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.\n",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "space",
              "comment": "",
              "type": "CanvasSpace",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "getPixel",
      "source": [
        [
          "src/Image.ts",
          223,
          17
        ]
      ],
      "id": 3486,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given an ImaegData object and a position, return the RGBA pixel value at that position.",
          "returns": "Pt",
          "returns_comment": "values of the pixel at the specific position\n",
          "parameters": [
            {
              "name": "imgData",
              "comment": "an ImageData object",
              "type": "ImageData",
              "default": false
            },
            {
              "name": "p",
              "comment": "a position on the image",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "imageDataToBlob",
      "source": [
        [
          "src/Image.ts",
          296,
          24
        ]
      ],
      "id": 3507,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Convert ImageData object to a Blob, which you can then create an Img instance via [`Img.fromBlob`](#link). Note that the resulting image's dimensions will not account for pixel density.",
          "returns": "Promise",
          "returns_comment": false,
          "parameters": [
            {
              "name": "data",
              "comment": "\n",
              "type": "ImageData",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "load",
      "source": [
        [
          "src/Image.ts",
          44,
          13
        ]
      ],
      "id": 3435,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static function to load an image with an optional ready callback. The Img instance will returned immediately before the image is loaded. To use async/await, use the `loadAsync` function or `new Img(...).load(...)`.",
          "returns": "Img",
          "returns_comment": false,
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "space",
              "comment": "Set the `CanvasSpace` reference. This is optional but will make sure the image's pixelScale match the canvas and set the context for creating pattern.",
              "type": "CanvasSpace",
              "default": false
            },
            {
              "name": "ready",
              "comment": "An optional ready callback function\n",
              "type": " Fn(img:any)",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "loadAsync",
      "source": [
        [
          "src/Image.ts",
          60,
          24
        ]
      ],
      "id": 3445,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static method to load an image using async/await.",
          "returns": "Promise",
          "returns_comment": "\n",
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "space",
              "comment": "Set the `CanvasSpace` reference. This is optional but will make sure the image's pixelScale match the canvas and set the context for creating pattern.",
              "type": "CanvasSpace",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "loadPattern",
      "source": [
        [
          "src/Image.ts",
          74,
          26
        ]
      ],
      "id": 3450,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "A static method to load an image pattern using async/await.",
          "returns": "Promise",
          "returns_comment": "a `CanvasPattern` instance for use in `fill()`\n",
          "parameters": [
            {
              "name": "src",
              "comment": "an url of the image in same domain. Alternatively you can use a base64 string. To load from Blob, use `Img.fromBlob`.",
              "type": "string",
              "default": false
            },
            {
              "name": "space",
              "comment": "Set the `CanvasSpace` reference. This is optional but will make sure the image's pixelScale match the canvas and set the context for creating pattern.",
              "type": "CanvasSpace",
              "default": false
            },
            {
              "name": "repeat",
              "comment": "set how the pattern will repeat fills",
              "type": "CanvasPatternRepetition",
              "default": "\"repeat\""
            },
            {
              "name": "editable",
              "comment": "Specify if you want to manipulate pixels of this image. Default is `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}