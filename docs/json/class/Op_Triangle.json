{
  "name": "Triangle",
  "source": [
    [
      "src/Op.ts",
      855,
      21
    ]
  ],
  "kind": "Class",
  "id": 1186,
  "comment": "Triangle class provides static functions to create and operate on trianges. A triange is a polygon represented as a Group of 3 Pts.\nYou can use the static functions as-is, or apply the [`Group.op`](#link) or [`Pt.op`](#link) to enable functional programming.\nSee [Op guide](../guide/Op-0400.html) for details.",
  "constructor": [],
  "accessors": [],
  "methods": [
    {
      "name": "altitude",
      "source": [
        [
          "src/Op.ts",
          926,
          17
        ]
      ],
      "id": 1204,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a triangle's altitude, which is a line from a triangle's point to its opposite side, and perpendicular to its opposite side.",
          "returns": "Group",
          "returns_comment": "a Group that represents the altitude line\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "index",
              "comment": "a Pt on the triangle group",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circumcenter",
      "source": [
        [
          "src/Op.ts",
          981,
          21
        ]
      ],
      "id": 1218,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get circumcenter, which is the intersection point of its 3 perpendicular bisectors lines ( each of which divides a side in half and is perpendicular to the side).",
          "returns": "Pt",
          "returns_comment": "the circumcenter as a Pt\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "circumcircle",
      "source": [
        [
          "src/Op.ts",
          994,
          21
        ]
      ],
      "id": 1221,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get circumcenter, which is the intersection point of its 3 perpendicular bisectors lines ( each of which divides a side in half and is perpendicular to the side).",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "center",
              "comment": "Optional parameter if the circumcenter is already known. Otherwise, leave it empty and the circumcenter will be calculated\n",
              "type": "Pt",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromCenter",
      "source": [
        [
          "src/Op.ts",
          885,
          19
        ]
      ],
      "id": 1193,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create an equilateral triangle based on a center point and a size.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "pt",
              "comment": "the center point",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "size",
              "comment": "size is the magnitude of lines from center to the triangle's vertices, like a \"radius\".\n",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromCircle",
      "source": [
        [
          "src/Op.ts",
          875,
          19
        ]
      ],
      "id": 1190,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a triangle that fits within a circle.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "circle",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a circle\n",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "fromRect",
      "source": [
        [
          "src/Op.ts",
          861,
          17
        ]
      ],
      "id": 1187,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Create a triangle from a rectangle. The triangle will be isosceles, with the bottom of the rectangle as its base.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "rect",
              "comment": "a Group or an Iterable<Pt> with 2 Pt representing a rectangle\n",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "incenter",
      "source": [
        [
          "src/Op.ts",
          954,
          17
        ]
      ],
      "id": 1211,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get incenter, which is the center point of its inner circle, and also the intersection point of its 3 angle bisector lines (each of which cuts one of the 3 angles in half).",
          "returns": "Pt",
          "returns_comment": "the incenter as a Pt\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "incircle",
      "source": [
        [
          "src/Op.ts",
          967,
          17
        ]
      ],
      "id": 1214,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get an interior circle, which is the largest circle completed enclosed by this triangle.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "center",
              "comment": "Optional parameter if the incenter is already known. Otherwise, leave it empty and the incenter will be calculated\n",
              "type": "Pt",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "medial",
      "source": [
        [
          "src/Op.ts",
          895,
          15
        ]
      ],
      "id": 1197,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get the medial, which is an inner triangle formed by connecting the midpoints of this triangle's sides.",
          "returns": "Group",
          "returns_comment": "a Group representing a medial triangle\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "oppositeSide",
      "source": [
        [
          "src/Op.ts",
          908,
          21
        ]
      ],
      "id": 1200,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Given a point of the triangle, the opposite side is the side which the point doesn't touch.",
          "returns": "Group",
          "returns_comment": "a Group that represents a line of the opposite side\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            },
            {
              "name": "index",
              "comment": "a Pt on the triangle group",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "orthocenter",
      "source": [
        [
          "src/Op.ts",
          941,
          20
        ]
      ],
      "id": 1208,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get orthocenter, which is the intersection point of a triangle's 3 altitudes (the 3 lines that are perpendicular to its 3 opposite sides).",
          "returns": "Pt",
          "returns_comment": "the orthocenter as a Pt\n",
          "parameters": [
            {
              "name": "tri",
              "comment": "a Group or an Iterable<Pt> representing a triangle",
              "type": "PtIterable",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}