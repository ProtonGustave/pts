{
  "name": "Mat",
  "source": [
    [
      "src/LinearAlgebra.ts",
      213,
      16
    ]
  ],
  "kind": "Class",
  "id": 922,
  "comment": "Mat provides various static functions for matrix operations as well as a convenient way to chain a 3x3 transformation matrix. It's not fully optimized but good enough to use.",
  "constructor": [
    {
      "name": "constructor",
      "source": [
        [
          "src/LinearAlgebra.ts",
          215,
          27
        ]
      ],
      "id": 924,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "",
          "returns": "Mat",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    }
  ],
  "accessors": [
    {
      "name": "domMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          233,
          15
        ]
      ],
      "id": 928,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Convert the value of its stored 3x3 matrix to a 2D [`DOMMatrix`](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix) instance",
      "getter": {
        "type": "DOMMatrix"
      },
      "setter": false
    },
    {
      "name": "value",
      "source": [
        [
          "src/LinearAlgebra.ts",
          225,
          11
        ]
      ],
      "id": 926,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "comment": "Get the current value of its stored 3x3 matrix",
      "getter": {
        "type": "GroupLike"
      },
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "reset",
      "source": [
        [
          "src/LinearAlgebra.ts",
          241,
          7
        ]
      ],
      "id": 930,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Reset the internal 3x3 matrix to its identity",
          "returns": "void",
          "returns_comment": false,
          "parameters": [],
          "tags": []
        }
      ]
    },
    {
      "name": "rotate2D",
      "source": [
        [
          "src/LinearAlgebra.ts",
          263,
          10
        ]
      ],
      "id": 936,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Scale the internal 3x3 matrix. You can chain this function with other related functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "ang",
              "comment": "Angle of rotation",
              "type": "number",
              "default": false
            },
            {
              "name": "at",
              "comment": "Optional origin location to rotate from.\n",
              "type": "PtLike",
              "default": "[0,0]"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scale2D",
      "source": [
        [
          "src/LinearAlgebra.ts",
          251,
          9
        ]
      ],
      "id": 932,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Scale the internal 3x3 matrix. You can chain this function with other related functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "val",
              "comment": "scale factors",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "at",
              "comment": "Optional origin location to scale from.\n",
              "type": "PtLike",
              "default": "[0,0]"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shear2D",
      "source": [
        [
          "src/LinearAlgebra.ts",
          286,
          9
        ]
      ],
      "id": 943,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Shear the internal 3x3 matrix. You can chain this function with other related functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "val",
              "comment": "shear factors (before tan() operation)",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "at",
              "comment": "Optional origin location to scale from.\n",
              "type": "PtLike",
              "default": "[0,0]"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "translate2D",
      "source": [
        [
          "src/LinearAlgebra.ts",
          274,
          13
        ]
      ],
      "id": 940,
      "flags": {},
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Translate the internal 3x3 matrix. You can chain this function with other related functions.",
          "returns": "this",
          "returns_comment": false,
          "parameters": [
            {
              "name": "val",
              "comment": "offset values\n",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "add",
      "source": [
        [
          "src/LinearAlgebra.ts",
          299,
          12
        ]
      ],
      "id": 947,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Matrix addition. Matrices should have the same rows and columns.",
          "returns": "Group",
          "returns_comment": "a new group with the same rows and columns as a and b\n",
          "parameters": [
            {
              "name": "a",
              "comment": "a group of Pt",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "b",
              "comment": "a scalar number, an array of numeric arrays, or a group of Pt",
              "type": "GroupLike | number[][] | number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "multiply",
      "source": [
        [
          "src/LinearAlgebra.ts",
          323,
          17
        ]
      ],
      "id": 951,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Matrix multiplication.",
          "returns": "Group",
          "returns_comment": "If not elementwise, this will return a new group with M Pt, each with N dimensions (M-rows, N-columns).\n",
          "parameters": [
            {
              "name": "a",
              "comment": "a Group of M Pts, each with K dimensions (M-rows, K-columns)",
              "type": "GroupLike",
              "default": false
            },
            {
              "name": "b",
              "comment": "a scalar number, an array of numeric arrays, or a Group of K Pts, each with N dimensions (K-rows, N-columns) -- or if transposed is true, then N Pts with K dimensions",
              "type": "GroupLike | number[][] | number",
              "default": false
            },
            {
              "name": "transposed",
              "comment": "(Only applicable if it's not elementwise multiplication) If true, then a and b's columns should match (ie, each Pt should have the same dimensions). Default is `false`.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "elementwise",
              "comment": "if true, then the multiplication is done element-wise. Default is `false`.",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "reflectAt2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          505,
          26
        ]
      ],
      "id": 1010,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a matrix to reflect a point along a line. For use in `transform2D`.",
          "returns": "Pt[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "p1",
              "comment": "second end point to define the reflection line\n",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "p2",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rotate2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          434,
          23
        ]
      ],
      "id": 983,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a rotate matrix for use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "cosA",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "sinA",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "rotateAt2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          481,
          25
        ]
      ],
      "id": 1000,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a matrix to rotate a point from an origin point. For use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "cosA",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "sinA",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "at",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scale2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          422,
          22
        ]
      ],
      "id": 979,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a scale matrix for use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "x",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "y",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "scaleAt2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          470,
          24
        ]
      ],
      "id": 995,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a matrix to scale a point from an origin point. For use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "sx",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "sy",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "at",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shear2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          446,
          22
        ]
      ],
      "id": 987,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a shear matrix for use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "tanX",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "tanY",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "shearAt2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          492,
          24
        ]
      ],
      "id": 1005,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a matrix to shear a point from an origin point. For use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "tanX",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "tanY",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "at",
              "comment": "",
              "type": "PtLike",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "toDOMMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          401,
          20
        ]
      ],
      "id": 972,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "",
          "returns": "number[]",
          "returns_comment": false,
          "parameters": [
            {
              "name": "m",
              "comment": "",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "transform2D",
      "source": [
        [
          "src/LinearAlgebra.ts",
          412,
          20
        ]
      ],
      "id": 975,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Transform a 2D point given a 2x3 or 3x3 matrix.",
          "returns": "Pt",
          "returns_comment": "a new transformed Pt\n",
          "parameters": [
            {
              "name": "pt",
              "comment": "a Pt to be transformed",
              "type": "PtLike",
              "default": false
            },
            {
              "name": "m",
              "comment": "2x3 or 3x3 matrix",
              "type": "GroupLike | number[][]",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "translate2DMatrix",
      "source": [
        [
          "src/LinearAlgebra.ts",
          458,
          26
        ]
      ],
      "id": 991,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Get a translate matrix for use in `transform2D`.",
          "returns": "GroupLike",
          "returns_comment": false,
          "parameters": [
            {
              "name": "x",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "y",
              "comment": "",
              "type": "number",
              "default": false
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "transpose",
      "source": [
        [
          "src/LinearAlgebra.ts",
          396,
          18
        ]
      ],
      "id": 967,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Same as `zip` function.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "g",
              "comment": "",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "defaultValue",
              "comment": "",
              "type": "number | boolean",
              "default": "false"
            },
            {
              "name": "useLongest",
              "comment": "",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "zip",
      "source": [
        [
          "src/LinearAlgebra.ts",
          383,
          12
        ]
      ],
      "id": 962,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Zip a group of Pt. For example, `[[1,2],[3,4],[5,6]]` will become `[[1,3,5],[2,4,6]]`.",
          "returns": "Group",
          "returns_comment": false,
          "parameters": [
            {
              "name": "g",
              "comment": "a group of Pt",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "defaultValue",
              "comment": "a default value to fill if index out of bound. If not provided, it will throw an error instead.",
              "type": "number | boolean",
              "default": "false"
            },
            {
              "name": "useLongest",
              "comment": "If true, find the longest list of values in a Pt and use its length for zipping. Default is false, which uses the first item's length for zipping.\n",
              "type": "boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    },
    {
      "name": "zipSlice",
      "source": [
        [
          "src/LinearAlgebra.ts",
          367,
          17
        ]
      ],
      "id": 957,
      "flags": {
        "isStatic": true
      },
      "overrides": false,
      "inherits": false,
      "signatures": [
        {
          "comment": "Zip one slice of an array of Pts. For example, if the input `g` are organized in rows, then this function will take the values in a specific column.",
          "returns": "Pt",
          "returns_comment": false,
          "parameters": [
            {
              "name": "g",
              "comment": "a group of Pt",
              "type": "GroupLike | number[][]",
              "default": false
            },
            {
              "name": "index",
              "comment": "",
              "type": "number",
              "default": false
            },
            {
              "name": "defaultValue",
              "comment": "a default value to fill if index out of bound. If not provided, it will throw an error instead.\n",
              "type": "number | boolean",
              "default": "false"
            }
          ],
          "tags": []
        }
      ]
    }
  ],
  "variables": [],
  "properties": [],
  "flags": {},
  "extends": [],
  "implements": []
}