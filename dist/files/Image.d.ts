import { CanvasForm, CanvasSpace } from "./Canvas";
import { Bound, Pt } from "./Pt";
import { Mat } from "./LinearAlgebra";
import { PtLike, CanvasPatternRepetition } from "./Types";
export declare class Img {
    protected _img: HTMLImageElement;
    protected _data: ImageData;
    protected _cv: HTMLCanvasElement;
    protected _ctx: CanvasRenderingContext2D;
    protected _scale: number;
    protected _loaded: boolean;
    protected _editable: boolean;
    protected _space: CanvasSpace;
    constructor(editable?: boolean, space?: CanvasSpace, crossOrigin?: boolean);
    static load(src: string, editable?: boolean, space?: CanvasSpace, ready?: (img: any) => {}): Img;
    static loadAsync(src: string, editable?: boolean, space?: CanvasSpace): Promise<Img>;
    static loadPattern(src: string, space: CanvasSpace, repeat?: CanvasPatternRepetition, editable?: boolean): Promise<CanvasPattern>;
    static blank(size: PtLike, space: CanvasSpace, scale?: number): Img;
    load(src: string): Promise<Img>;
    protected _drawToScale(canvasScale: number | PtLike, img: CanvasImageSource): void;
    initCanvas(width: number, height: number, canvasScale?: number | PtLike): void;
    bitmap(size?: PtLike): Promise<ImageBitmap>;
    pattern(reptition?: CanvasPatternRepetition, dynamic?: boolean): CanvasPattern;
    sync(): void;
    pixel(p: PtLike, rescale?: boolean | number): Pt;
    static getPixel(imgData: ImageData, p: PtLike): Pt;
    resize(sizeOrScale: PtLike, asScale?: boolean): this;
    crop(box: Bound): ImageData;
    filter(css: string): this;
    cleanup(): void;
    static fromBlob(blob: Blob, editable?: boolean, space?: CanvasSpace): Promise<Img>;
    static imageDataToBlob(data: ImageData): Promise<Blob>;
    toBase64(): string;
    toBlob(): Promise<Blob>;
    getForm(): CanvasForm;
    get current(): CanvasImageSource;
    get image(): HTMLImageElement;
    get canvas(): HTMLCanvasElement;
    get data(): ImageData;
    get ctx(): CanvasRenderingContext2D;
    get loaded(): boolean;
    get pixelScale(): number;
    get imageSize(): Pt;
    get canvasSize(): Pt;
    get scaledMatrix(): Mat;
}
